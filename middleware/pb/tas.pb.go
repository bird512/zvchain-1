// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tas.proto

package tas_middleware_pb

import (
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Code                 *uint32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	Body                 []byte   `protobuf:"bytes,3,opt,name=Body" json:"Body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{0}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{0}
>>>>>>> origin/develop
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Transaction struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data" json:"Data,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
	Nonce                *uint64  `protobuf:"varint,3,req,name=Nonce" json:"Nonce,omitempty"`
	Target               []byte   `protobuf:"bytes,4,opt,name=Target" json:"Target,omitempty"`
	GasLimit             []byte   `protobuf:"bytes,5,req,name=GasLimit" json:"GasLimit,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,6,req,name=GasPrice" json:"GasPrice,omitempty"`
	Hash                 []byte   `protobuf:"bytes,7,req,name=Hash" json:"Hash,omitempty"`
	ExtraData            []byte   `protobuf:"bytes,8,opt,name=ExtraData" json:"ExtraData,omitempty"`
	Type                 *int32   `protobuf:"varint,9,req,name=Type" json:"Type,omitempty"`
	Sign                 []byte   `protobuf:"bytes,10,opt,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{1}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{1}
>>>>>>> origin/develop
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *Transaction) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Transaction) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *Transaction) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *Transaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transaction) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *Transaction) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Transaction) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type TransactionRequestMessage struct {
	TransactionHashes    [][]byte `protobuf:"bytes,1,rep,name=TransactionHashes" json:"TransactionHashes,omitempty"`
	CurrentBlockHash     []byte   `protobuf:"bytes,2,req,name=CurrentBlockHash" json:"CurrentBlockHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionRequestMessage) Reset()         { *m = TransactionRequestMessage{} }
func (m *TransactionRequestMessage) String() string { return proto.CompactTextString(m) }
func (*TransactionRequestMessage) ProtoMessage()    {}
func (*TransactionRequestMessage) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{2}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{2}
>>>>>>> origin/develop
}
func (m *TransactionRequestMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRequestMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequestMessage.Merge(m, src)
}
func (m *TransactionRequestMessage) XXX_Size() int {
	return m.Size()
}
func (m *TransactionRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequestMessage proto.InternalMessageInfo

func (m *TransactionRequestMessage) GetTransactionHashes() [][]byte {
	if m != nil {
		return m.TransactionHashes
	}
	return nil
}

func (m *TransactionRequestMessage) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

type TrieNodes struct {
	TrieNodes            []*TrieNode `protobuf:"bytes,1,rep,name=TrieNodes" json:"TrieNodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TrieNodes) Reset()         { *m = TrieNodes{} }
func (m *TrieNodes) String() string { return proto.CompactTextString(m) }
func (*TrieNodes) ProtoMessage()    {}
func (*TrieNodes) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{3}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{3}
>>>>>>> origin/develop
}
func (m *TrieNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrieNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrieNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrieNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieNodes.Merge(m, src)
}
func (m *TrieNodes) XXX_Size() int {
	return m.Size()
}
func (m *TrieNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieNodes.DiscardUnknown(m)
}

var xxx_messageInfo_TrieNodes proto.InternalMessageInfo

func (m *TrieNodes) GetTrieNodes() []*TrieNode {
	if m != nil {
		return m.TrieNodes
	}
	return nil
}

type TransactionSlice struct {
	Transactions         []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TransactionSlice) Reset()         { *m = TransactionSlice{} }
func (m *TransactionSlice) String() string { return proto.CompactTextString(m) }
func (*TransactionSlice) ProtoMessage()    {}
func (*TransactionSlice) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{4}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{4}
>>>>>>> origin/develop
}
func (m *TransactionSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionSlice.Merge(m, src)
}
func (m *TransactionSlice) XXX_Size() int {
	return m.Size()
}
func (m *TransactionSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionSlice.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionSlice proto.InternalMessageInfo

func (m *TransactionSlice) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type ChainPieceReq struct {
	Pieces               [][]byte `protobuf:"bytes,1,rep,name=Pieces" json:"Pieces,omitempty"`
	ReqCnt               *int32   `protobuf:"varint,2,opt,name=ReqCnt" json:"ReqCnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainPieceReq) Reset()         { *m = ChainPieceReq{} }
func (m *ChainPieceReq) String() string { return proto.CompactTextString(m) }
func (*ChainPieceReq) ProtoMessage()    {}
func (*ChainPieceReq) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{5}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{5}
>>>>>>> origin/develop
}
func (m *ChainPieceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainPieceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainPieceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainPieceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainPieceReq.Merge(m, src)
}
func (m *ChainPieceReq) XXX_Size() int {
	return m.Size()
}
func (m *ChainPieceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainPieceReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChainPieceReq proto.InternalMessageInfo

func (m *ChainPieceReq) GetPieces() [][]byte {
	if m != nil {
		return m.Pieces
	}
	return nil
}

func (m *ChainPieceReq) GetReqCnt() int32 {
	if m != nil && m.ReqCnt != nil {
		return *m.ReqCnt
	}
	return 0
}

type SyncRequest struct {
	ReqHeight            *uint64  `protobuf:"varint,1,req,name=ReqHeight" json:"ReqHeight,omitempty"`
	ReqSize              *int32   `protobuf:"varint,2,req,name=ReqSize" json:"ReqSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{6}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{6}
>>>>>>> origin/develop
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

func (m *SyncRequest) GetReqHeight() uint64 {
	if m != nil && m.ReqHeight != nil {
		return *m.ReqHeight
	}
	return 0
}

func (m *SyncRequest) GetReqSize() int32 {
	if m != nil && m.ReqSize != nil {
		return *m.ReqSize
	}
	return 0
}

type BlockHeader struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash" json:"Hash,omitempty"`
	Height               *uint64  `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	PreHash              []byte   `protobuf:"bytes,3,opt,name=PreHash" json:"PreHash,omitempty"`
	Elapsed              *int32   `protobuf:"varint,4,opt,name=Elapsed" json:"Elapsed,omitempty"`
	ProveValue           []byte   `protobuf:"bytes,5,opt,name=ProveValue" json:"ProveValue,omitempty"`
	TotalQN              *uint64  `protobuf:"varint,6,opt,name=TotalQN" json:"TotalQN,omitempty"`
	CurTime              *int64   `protobuf:"varint,7,opt,name=CurTime" json:"CurTime,omitempty"`
	Castor               []byte   `protobuf:"bytes,8,opt,name=Castor" json:"Castor,omitempty"`
	GroupId              []byte   `protobuf:"bytes,9,opt,name=GroupId" json:"GroupId,omitempty"`
	Signature            []byte   `protobuf:"bytes,10,opt,name=Signature" json:"Signature,omitempty"`
	Nonce                *int32   `protobuf:"varint,11,opt,name=Nonce" json:"Nonce,omitempty"`
	TxTree               []byte   `protobuf:"bytes,12,opt,name=TxTree" json:"TxTree,omitempty"`
	ReceiptTree          []byte   `protobuf:"bytes,13,opt,name=ReceiptTree" json:"ReceiptTree,omitempty"`
	StateTree            []byte   `protobuf:"bytes,14,opt,name=StateTree" json:"StateTree,omitempty"`
	ExtraData            []byte   `protobuf:"bytes,15,opt,name=ExtraData" json:"ExtraData,omitempty"`
	Random               []byte   `protobuf:"bytes,16,opt,name=Random" json:"Random,omitempty"`
	GasFee               *uint64  `protobuf:"varint,17,opt,name=GasFee" json:"GasFee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{7}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{7}
>>>>>>> origin/develop
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *BlockHeader) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

func (m *BlockHeader) GetElapsed() int32 {
	if m != nil && m.Elapsed != nil {
		return *m.Elapsed
	}
	return 0
}

func (m *BlockHeader) GetProveValue() []byte {
	if m != nil {
		return m.ProveValue
	}
	return nil
}

func (m *BlockHeader) GetTotalQN() uint64 {
	if m != nil && m.TotalQN != nil {
		return *m.TotalQN
	}
	return 0
}

func (m *BlockHeader) GetCurTime() int64 {
	if m != nil && m.CurTime != nil {
		return *m.CurTime
	}
	return 0
}

func (m *BlockHeader) GetCastor() []byte {
	if m != nil {
		return m.Castor
	}
	return nil
}

func (m *BlockHeader) GetGroupId() []byte {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *BlockHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BlockHeader) GetNonce() int32 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetTxTree() []byte {
	if m != nil {
		return m.TxTree
	}
	return nil
}

func (m *BlockHeader) GetReceiptTree() []byte {
	if m != nil {
		return m.ReceiptTree
	}
	return nil
}

func (m *BlockHeader) GetStateTree() []byte {
	if m != nil {
		return m.StateTree
	}
	return nil
}

func (m *BlockHeader) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *BlockHeader) GetRandom() []byte {
	if m != nil {
		return m.Random
	}
	return nil
}

func (m *BlockHeader) GetGasFee() uint64 {
	if m != nil && m.GasFee != nil {
		return *m.GasFee
	}
	return 0
}

type Block struct {
	Header               *BlockHeader   `protobuf:"bytes,1,req,name=Header" json:"Header,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{8}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{8}
>>>>>>> origin/develop
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type BlockSlice struct {
	Blocks               []*Block `protobuf:"bytes,1,rep,name=Blocks" json:"Blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockSlice) Reset()         { *m = BlockSlice{} }
func (m *BlockSlice) String() string { return proto.CompactTextString(m) }
func (*BlockSlice) ProtoMessage()    {}
func (*BlockSlice) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{9}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{9}
>>>>>>> origin/develop
}
func (m *BlockSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockSlice.Merge(m, src)
}
func (m *BlockSlice) XXX_Size() int {
	return m.Size()
}
func (m *BlockSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockSlice.DiscardUnknown(m)
}

var xxx_messageInfo_BlockSlice proto.InternalMessageInfo

func (m *BlockSlice) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

<<<<<<< HEAD
=======
type Member struct {
	Id                   []byte   `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`
	PubKey               []byte   `protobuf:"bytes,2,req,name=PubKey" json:"PubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{10}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Member) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type GroupHeader struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash" json:"Hash,omitempty"`
	Parent               []byte   `protobuf:"bytes,2,opt,name=Parent" json:"Parent,omitempty"`
	PreGroup             []byte   `protobuf:"bytes,3,req,name=PreGroup" json:"PreGroup,omitempty"`
	Authority            *uint64  `protobuf:"varint,4,opt,name=Authority" json:"Authority,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	BeginTime            *int64   `protobuf:"varint,6,opt,name=BeginTime" json:"BeginTime,omitempty"`
	MemberRoot           []byte   `protobuf:"bytes,7,opt,name=MemberRoot" json:"MemberRoot,omitempty"`
	CreateHeight         *uint64  `protobuf:"varint,8,opt,name=CreateHeight" json:"CreateHeight,omitempty"`
	ReadyHeight          *uint64  `protobuf:"varint,9,opt,name=ReadyHeight" json:"ReadyHeight,omitempty"`
	WorkHeight           *uint64  `protobuf:"varint,10,opt,name=WorkHeight" json:"WorkHeight,omitempty"`
	DismissHeight        *uint64  `protobuf:"varint,11,opt,name=DismissHeight" json:"DismissHeight,omitempty"`
	Extends              *string  `protobuf:"bytes,12,opt,name=Extends" json:"Extends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupHeader) Reset()         { *m = GroupHeader{} }
func (m *GroupHeader) String() string { return proto.CompactTextString(m) }
func (*GroupHeader) ProtoMessage()    {}
func (*GroupHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{11}
}
func (m *GroupHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupHeader.Merge(m, src)
}
func (m *GroupHeader) XXX_Size() int {
	return m.Size()
}
func (m *GroupHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupHeader.DiscardUnknown(m)
}

var xxx_messageInfo_GroupHeader proto.InternalMessageInfo

func (m *GroupHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *GroupHeader) GetParent() []byte {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *GroupHeader) GetPreGroup() []byte {
	if m != nil {
		return m.PreGroup
	}
	return nil
}

func (m *GroupHeader) GetAuthority() uint64 {
	if m != nil && m.Authority != nil {
		return *m.Authority
	}
	return 0
}

func (m *GroupHeader) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GroupHeader) GetBeginTime() int64 {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return 0
}

func (m *GroupHeader) GetMemberRoot() []byte {
	if m != nil {
		return m.MemberRoot
	}
	return nil
}

func (m *GroupHeader) GetCreateHeight() uint64 {
	if m != nil && m.CreateHeight != nil {
		return *m.CreateHeight
	}
	return 0
}

func (m *GroupHeader) GetReadyHeight() uint64 {
	if m != nil && m.ReadyHeight != nil {
		return *m.ReadyHeight
	}
	return 0
}

func (m *GroupHeader) GetWorkHeight() uint64 {
	if m != nil && m.WorkHeight != nil {
		return *m.WorkHeight
	}
	return 0
}

func (m *GroupHeader) GetDismissHeight() uint64 {
	if m != nil && m.DismissHeight != nil {
		return *m.DismissHeight
	}
	return 0
}

func (m *GroupHeader) GetExtends() string {
	if m != nil && m.Extends != nil {
		return *m.Extends
	}
	return ""
}

type Group struct {
	Header               *GroupHeader `protobuf:"bytes,1,req,name=Header" json:"Header,omitempty"`
	Id                   []byte       `protobuf:"bytes,2,opt,name=Id" json:"Id,omitempty"`
	PubKey               []byte       `protobuf:"bytes,3,opt,name=PubKey" json:"PubKey,omitempty"`
	Signature            []byte       `protobuf:"bytes,4,opt,name=Signature" json:"Signature,omitempty"`
	Members              [][]byte     `protobuf:"bytes,5,rep,name=Members" json:"Members,omitempty"`
	GroupHeight          *uint64      `protobuf:"varint,6,opt,name=GroupHeight" json:"GroupHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{12}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetHeader() *GroupHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Group) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Group) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Group) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Group) GetMembers() [][]byte {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Group) GetGroupHeight() uint64 {
	if m != nil && m.GroupHeight != nil {
		return *m.GroupHeight
	}
	return 0
}

type GroupInfo struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{13}
}
func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GroupSlice struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupSlice) Reset()         { *m = GroupSlice{} }
func (m *GroupSlice) String() string { return proto.CompactTextString(m) }
func (*GroupSlice) ProtoMessage()    {}
func (*GroupSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{14}
}
func (m *GroupSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupSlice.Merge(m, src)
}
func (m *GroupSlice) XXX_Size() int {
	return m.Size()
}
func (m *GroupSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupSlice.DiscardUnknown(m)
}

var xxx_messageInfo_GroupSlice proto.InternalMessageInfo

func (m *GroupSlice) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GroupIdSlice struct {
	GroupIds             [][]byte `protobuf:"bytes,1,rep,name=GroupIds" json:"GroupIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupIdSlice) Reset()         { *m = GroupIdSlice{} }
func (m *GroupIdSlice) String() string { return proto.CompactTextString(m) }
func (*GroupIdSlice) ProtoMessage()    {}
func (*GroupIdSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{15}
}
func (m *GroupIdSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupIdSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupIdSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupIdSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupIdSlice.Merge(m, src)
}
func (m *GroupIdSlice) XXX_Size() int {
	return m.Size()
}
func (m *GroupIdSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupIdSlice.DiscardUnknown(m)
}

var xxx_messageInfo_GroupIdSlice proto.InternalMessageInfo

func (m *GroupIdSlice) GetGroupIds() [][]byte {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

type GroupRequestInfo struct {
	CurrentTopGroupId    []byte        `protobuf:"bytes,1,req,name=CurrentTopGroupId" json:"CurrentTopGroupId,omitempty"`
	ExistGroupIds        *GroupIdSlice `protobuf:"bytes,2,opt,name=ExistGroupIds" json:"ExistGroupIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GroupRequestInfo) Reset()         { *m = GroupRequestInfo{} }
func (m *GroupRequestInfo) String() string { return proto.CompactTextString(m) }
func (*GroupRequestInfo) ProtoMessage()    {}
func (*GroupRequestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{16}
}
func (m *GroupRequestInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupRequestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupRequestInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupRequestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRequestInfo.Merge(m, src)
}
func (m *GroupRequestInfo) XXX_Size() int {
	return m.Size()
}
func (m *GroupRequestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRequestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRequestInfo proto.InternalMessageInfo

func (m *GroupRequestInfo) GetCurrentTopGroupId() []byte {
	if m != nil {
		return m.CurrentTopGroupId
	}
	return nil
}

func (m *GroupRequestInfo) GetExistGroupIds() *GroupIdSlice {
	if m != nil {
		return m.ExistGroupIds
	}
	return nil
}

>>>>>>> origin/develop
type Hashes struct {
	Hashes               [][]byte `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hashes) Reset()         { *m = Hashes{} }
func (m *Hashes) String() string { return proto.CompactTextString(m) }
func (*Hashes) ProtoMessage()    {}
func (*Hashes) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{10}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{17}
>>>>>>> origin/develop
}
func (m *Hashes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hashes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hashes.Merge(m, src)
}
func (m *Hashes) XXX_Size() int {
	return m.Size()
}
func (m *Hashes) XXX_DiscardUnknown() {
	xxx_messageInfo_Hashes.DiscardUnknown(m)
}

var xxx_messageInfo_Hashes proto.InternalMessageInfo

func (m *Hashes) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type TotalQnInfo struct {
	TotalQn              *uint64  `protobuf:"varint,1,req,name=TotalQn" json:"TotalQn,omitempty"`
	Height               *uint64  `protobuf:"varint,2,req,name=Height" json:"Height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TotalQnInfo) Reset()         { *m = TotalQnInfo{} }
func (m *TotalQnInfo) String() string { return proto.CompactTextString(m) }
func (*TotalQnInfo) ProtoMessage()    {}
func (*TotalQnInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{11}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{18}
>>>>>>> origin/develop
}
func (m *TotalQnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalQnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalQnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalQnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalQnInfo.Merge(m, src)
}
func (m *TotalQnInfo) XXX_Size() int {
	return m.Size()
}
func (m *TotalQnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalQnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TotalQnInfo proto.InternalMessageInfo

func (m *TotalQnInfo) GetTotalQn() uint64 {
	if m != nil && m.TotalQn != nil {
		return *m.TotalQn
	}
	return 0
}

func (m *TotalQnInfo) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

type StateInfoReq struct {
	Height               *uint64           `protobuf:"varint,1,req,name=Height" json:"Height,omitempty"`
	Transactions         *TransactionSlice `protobuf:"bytes,2,opt,name=Transactions" json:"Transactions,omitempty"`
	Addresses            [][]byte          `protobuf:"bytes,3,rep,name=Addresses" json:"Addresses,omitempty"`
	BlockHash            []byte            `protobuf:"bytes,4,req,name=BlockHash" json:"BlockHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StateInfoReq) Reset()         { *m = StateInfoReq{} }
func (m *StateInfoReq) String() string { return proto.CompactTextString(m) }
func (*StateInfoReq) ProtoMessage()    {}
func (*StateInfoReq) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{12}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{19}
>>>>>>> origin/develop
}
func (m *StateInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateInfoReq.Merge(m, src)
}
func (m *StateInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *StateInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StateInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfoReq proto.InternalMessageInfo

func (m *StateInfoReq) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *StateInfoReq) GetTransactions() *TransactionSlice {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *StateInfoReq) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *StateInfoReq) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type StateInfo struct {
	Height               *uint64     `protobuf:"varint,1,req,name=Height" json:"Height,omitempty"`
	TrieNodes            []*TrieNode `protobuf:"bytes,2,rep,name=TrieNodes" json:"TrieNodes,omitempty"`
	BlockHash            []byte      `protobuf:"bytes,3,req,name=BlockHash" json:"BlockHash,omitempty"`
	ProBlockStateRoot    []byte      `protobuf:"bytes,4,req,name=ProBlockStateRoot" json:"ProBlockStateRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StateInfo) Reset()         { *m = StateInfo{} }
func (m *StateInfo) String() string { return proto.CompactTextString(m) }
func (*StateInfo) ProtoMessage()    {}
func (*StateInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{13}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{20}
>>>>>>> origin/develop
}
func (m *StateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateInfo.Merge(m, src)
}
func (m *StateInfo) XXX_Size() int {
	return m.Size()
}
func (m *StateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StateInfo proto.InternalMessageInfo

func (m *StateInfo) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *StateInfo) GetTrieNodes() []*TrieNode {
	if m != nil {
		return m.TrieNodes
	}
	return nil
}

func (m *StateInfo) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *StateInfo) GetProBlockStateRoot() []byte {
	if m != nil {
		return m.ProBlockStateRoot
	}
	return nil
}

type TrieNode struct {
	Key                  []byte   `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,req,name=Data" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrieNode) Reset()         { *m = TrieNode{} }
func (m *TrieNode) String() string { return proto.CompactTextString(m) }
func (*TrieNode) ProtoMessage()    {}
func (*TrieNode) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{14}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{21}
>>>>>>> origin/develop
}
func (m *TrieNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrieNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrieNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrieNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieNode.Merge(m, src)
}
func (m *TrieNode) XXX_Size() int {
	return m.Size()
}
func (m *TrieNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieNode.DiscardUnknown(m)
}

var xxx_messageInfo_TrieNode proto.InternalMessageInfo

func (m *TrieNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TrieNode) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignData struct {
	DataHash             []byte   `protobuf:"bytes,1,req,name=DataHash" json:"DataHash,omitempty"`
	DataSign             []byte   `protobuf:"bytes,2,req,name=DataSign" json:"DataSign,omitempty"`
	SignMember           []byte   `protobuf:"bytes,3,req,name=SignMember" json:"SignMember,omitempty"`
	Version              *int32   `protobuf:"varint,4,opt,name=Version,def=0" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignData) Reset()         { *m = SignData{} }
func (m *SignData) String() string { return proto.CompactTextString(m) }
func (*SignData) ProtoMessage()    {}
func (*SignData) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{15}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{22}
>>>>>>> origin/develop
}
func (m *SignData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignData.Merge(m, src)
}
func (m *SignData) XXX_Size() int {
	return m.Size()
}
func (m *SignData) XXX_DiscardUnknown() {
	xxx_messageInfo_SignData.DiscardUnknown(m)
}

var xxx_messageInfo_SignData proto.InternalMessageInfo

const Default_SignData_Version int32 = 0

func (m *SignData) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *SignData) GetDataSign() []byte {
	if m != nil {
		return m.DataSign
	}
	return nil
}

func (m *SignData) GetSignMember() []byte {
	if m != nil {
		return m.SignMember
	}
	return nil
}

func (m *SignData) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_SignData_Version
}

<<<<<<< HEAD
=======
type ConsensusGroupInitSummary struct {
	Header               *GroupHeader `protobuf:"bytes,1,req,name=Header" json:"Header,omitempty"`
	Signature            []byte       `protobuf:"bytes,2,req,name=Signature" json:"Signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ConsensusGroupInitSummary) Reset()         { *m = ConsensusGroupInitSummary{} }
func (m *ConsensusGroupInitSummary) String() string { return proto.CompactTextString(m) }
func (*ConsensusGroupInitSummary) ProtoMessage()    {}
func (*ConsensusGroupInitSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{23}
}
func (m *ConsensusGroupInitSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusGroupInitSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusGroupInitSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusGroupInitSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusGroupInitSummary.Merge(m, src)
}
func (m *ConsensusGroupInitSummary) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusGroupInitSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusGroupInitSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusGroupInitSummary proto.InternalMessageInfo

func (m *ConsensusGroupInitSummary) GetHeader() *GroupHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ConsensusGroupInitSummary) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

>>>>>>> origin/develop
type PubKeyInfo struct {
	ID                   []byte   `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,2,req,name=PublicKey" json:"PublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubKeyInfo) Reset()         { *m = PubKeyInfo{} }
func (m *PubKeyInfo) String() string { return proto.CompactTextString(m) }
func (*PubKeyInfo) ProtoMessage()    {}
func (*PubKeyInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{16}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{24}
>>>>>>> origin/develop
}
func (m *PubKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyInfo.Merge(m, src)
}
func (m *PubKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *PubKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyInfo proto.InternalMessageInfo

func (m *PubKeyInfo) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PubKeyInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type ConsensusCastMessage struct {
	Bh                   *BlockHeader `protobuf:"bytes,1,req,name=Bh" json:"Bh,omitempty"`
	GroupID              []byte       `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	Sign                 *SignData    `protobuf:"bytes,3,req,name=Sign" json:"Sign,omitempty"`
	ProveHash            []byte       `protobuf:"bytes,4,req,name=ProveHash" json:"ProveHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

<<<<<<< HEAD
func (m *ConsensusCastMessage) Reset()         { *m = ConsensusCastMessage{} }
func (m *ConsensusCastMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusCastMessage) ProtoMessage()    {}
func (*ConsensusCastMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{17}
}
func (m *ConsensusCastMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusCastMessage.Unmarshal(m, b)
}
func (m *ConsensusCastMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusCastMessage.Marshal(b, m, deterministic)
}
func (dst *ConsensusCastMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCastMessage.Merge(dst, src)
}
func (m *ConsensusCastMessage) XXX_Size() int {
	return xxx_messageInfo_ConsensusCastMessage.Size(m)
=======
func (m *ConsensusGroupInitInfo) Reset()         { *m = ConsensusGroupInitInfo{} }
func (m *ConsensusGroupInitInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusGroupInitInfo) ProtoMessage()    {}
func (*ConsensusGroupInitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{25}
}
func (m *ConsensusGroupInitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusGroupInitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusGroupInitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusGroupInitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusGroupInitInfo.Merge(m, src)
}
func (m *ConsensusGroupInitInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusGroupInitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusGroupInitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusGroupInitInfo proto.InternalMessageInfo

func (m *ConsensusGroupInitInfo) GetGI() *ConsensusGroupInitSummary {
	if m != nil {
		return m.GI
	}
	return nil
}

func (m *ConsensusGroupInitInfo) GetMems() [][]byte {
	if m != nil {
		return m.Mems
	}
	return nil
}

type ConsensusGroupRawMessage struct {
	GInfo                *ConsensusGroupInitInfo `protobuf:"bytes,1,req,name=GInfo" json:"GInfo,omitempty"`
	Sign                 *SignData               `protobuf:"bytes,3,req,name=sign" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ConsensusGroupRawMessage) Reset()         { *m = ConsensusGroupRawMessage{} }
func (m *ConsensusGroupRawMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusGroupRawMessage) ProtoMessage()    {}
func (*ConsensusGroupRawMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{26}
}
func (m *ConsensusGroupRawMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusGroupRawMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusGroupRawMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusGroupRawMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusGroupRawMessage.Merge(m, src)
}
func (m *ConsensusGroupRawMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusGroupRawMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusGroupRawMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusGroupRawMessage proto.InternalMessageInfo

func (m *ConsensusGroupRawMessage) GetGInfo() *ConsensusGroupInitInfo {
	if m != nil {
		return m.GInfo
	}
	return nil
}

func (m *ConsensusGroupRawMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type SharePiece struct {
	Seckey               []byte   `protobuf:"bytes,1,req,name=Seckey" json:"Seckey,omitempty"`
	Pubkey               []byte   `protobuf:"bytes,2,req,name=Pubkey" json:"Pubkey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SharePiece) Reset()         { *m = SharePiece{} }
func (m *SharePiece) String() string { return proto.CompactTextString(m) }
func (*SharePiece) ProtoMessage()    {}
func (*SharePiece) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{27}
}
func (m *SharePiece) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SharePiece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SharePiece.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SharePiece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharePiece.Merge(m, src)
}
func (m *SharePiece) XXX_Size() int {
	return m.Size()
}
func (m *SharePiece) XXX_DiscardUnknown() {
	xxx_messageInfo_SharePiece.DiscardUnknown(m)
}

var xxx_messageInfo_SharePiece proto.InternalMessageInfo

func (m *SharePiece) GetSeckey() []byte {
	if m != nil {
		return m.Seckey
	}
	return nil
}

func (m *SharePiece) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type ConsensusSharePieceMessage struct {
	GHash                []byte      `protobuf:"bytes,1,req,name=GHash" json:"GHash,omitempty"`
	Dest                 []byte      `protobuf:"bytes,2,req,name=Dest" json:"Dest,omitempty"`
	SharePiece           *SharePiece `protobuf:"bytes,3,req,name=SharePiece" json:"SharePiece,omitempty"`
	MemCnt               *int32      `protobuf:"varint,4,req,name=MemCnt" json:"MemCnt,omitempty"`
	Sign                 *SignData   `protobuf:"bytes,5,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConsensusSharePieceMessage) Reset()         { *m = ConsensusSharePieceMessage{} }
func (m *ConsensusSharePieceMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusSharePieceMessage) ProtoMessage()    {}
func (*ConsensusSharePieceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{28}
}
func (m *ConsensusSharePieceMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusSharePieceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusSharePieceMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusSharePieceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusSharePieceMessage.Merge(m, src)
}
func (m *ConsensusSharePieceMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusSharePieceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusSharePieceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusSharePieceMessage proto.InternalMessageInfo

func (m *ConsensusSharePieceMessage) GetGHash() []byte {
	if m != nil {
		return m.GHash
	}
	return nil
}

func (m *ConsensusSharePieceMessage) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *ConsensusSharePieceMessage) GetSharePiece() *SharePiece {
	if m != nil {
		return m.SharePiece
	}
	return nil
}

func (m *ConsensusSharePieceMessage) GetMemCnt() int32 {
	if m != nil && m.MemCnt != nil {
		return *m.MemCnt
	}
	return 0
}

func (m *ConsensusSharePieceMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusSignPubKeyMessage struct {
	GHash                []byte    `protobuf:"bytes,1,req,name=GHash" json:"GHash,omitempty"`
	GroupID              []byte    `protobuf:"bytes,2,req,name=GroupID" json:"GroupID,omitempty"`
	SignPK               []byte    `protobuf:"bytes,3,req,name=SignPK" json:"SignPK,omitempty"`
	MemCnt               *int32    `protobuf:"varint,4,req,name=MemCnt" json:"MemCnt,omitempty"`
	SignData             *SignData `protobuf:"bytes,5,req,name=SignData" json:"SignData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConsensusSignPubKeyMessage) Reset()         { *m = ConsensusSignPubKeyMessage{} }
func (m *ConsensusSignPubKeyMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusSignPubKeyMessage) ProtoMessage()    {}
func (*ConsensusSignPubKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{29}
}
func (m *ConsensusSignPubKeyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusSignPubKeyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusSignPubKeyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusSignPubKeyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusSignPubKeyMessage.Merge(m, src)
}
func (m *ConsensusSignPubKeyMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusSignPubKeyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusSignPubKeyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusSignPubKeyMessage proto.InternalMessageInfo

func (m *ConsensusSignPubKeyMessage) GetGHash() []byte {
	if m != nil {
		return m.GHash
	}
	return nil
}

func (m *ConsensusSignPubKeyMessage) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusSignPubKeyMessage) GetSignPK() []byte {
	if m != nil {
		return m.SignPK
	}
	return nil
}

func (m *ConsensusSignPubKeyMessage) GetMemCnt() int32 {
	if m != nil && m.MemCnt != nil {
		return *m.MemCnt
	}
	return 0
}

func (m *ConsensusSignPubKeyMessage) GetSignData() *SignData {
	if m != nil {
		return m.SignData
	}
	return nil
}

type ConsensusSignPubkeyReqMessage struct {
	GroupID              []byte    `protobuf:"bytes,1,req,name=GroupID" json:"GroupID,omitempty"`
	SignData             *SignData `protobuf:"bytes,2,req,name=SignData" json:"SignData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConsensusSignPubkeyReqMessage) Reset()         { *m = ConsensusSignPubkeyReqMessage{} }
func (m *ConsensusSignPubkeyReqMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusSignPubkeyReqMessage) ProtoMessage()    {}
func (*ConsensusSignPubkeyReqMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{30}
}
func (m *ConsensusSignPubkeyReqMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusSignPubkeyReqMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusSignPubkeyReqMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusSignPubkeyReqMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusSignPubkeyReqMessage.Merge(m, src)
}
func (m *ConsensusSignPubkeyReqMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusSignPubkeyReqMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusSignPubkeyReqMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusSignPubkeyReqMessage proto.InternalMessageInfo

func (m *ConsensusSignPubkeyReqMessage) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusSignPubkeyReqMessage) GetSignData() *SignData {
	if m != nil {
		return m.SignData
	}
	return nil
}

type StaticGroupSummary struct {
	GroupID              []byte   `protobuf:"bytes,1,req,name=GroupID" json:"GroupID,omitempty"`
	GroupPK              []byte   `protobuf:"bytes,2,req,name=GroupPK" json:"GroupPK,omitempty"`
	GHash                []byte   `protobuf:"bytes,3,req,name=GHash" json:"GHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaticGroupSummary) Reset()         { *m = StaticGroupSummary{} }
func (m *StaticGroupSummary) String() string { return proto.CompactTextString(m) }
func (*StaticGroupSummary) ProtoMessage()    {}
func (*StaticGroupSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{31}
}
func (m *StaticGroupSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaticGroupSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaticGroupSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaticGroupSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticGroupSummary.Merge(m, src)
}
func (m *StaticGroupSummary) XXX_Size() int {
	return m.Size()
}
func (m *StaticGroupSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticGroupSummary.DiscardUnknown(m)
}

var xxx_messageInfo_StaticGroupSummary proto.InternalMessageInfo

func (m *StaticGroupSummary) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *StaticGroupSummary) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *StaticGroupSummary) GetGHash() []byte {
	if m != nil {
		return m.GHash
	}
	return nil
}

type ConsensusGroupInitedMessage struct {
	GHash                []byte    `protobuf:"bytes,1,req,name=GHash" json:"GHash,omitempty"`
	GroupID              []byte    `protobuf:"bytes,2,req,name=GroupID" json:"GroupID,omitempty"`
	GroupPK              []byte    `protobuf:"bytes,3,req,name=GroupPK" json:"GroupPK,omitempty"`
	CreateHeight         *uint64   `protobuf:"varint,4,req,name=CreateHeight" json:"CreateHeight,omitempty"`
	ParentSign           []byte    `protobuf:"bytes,5,req,name=ParentSign" json:"ParentSign,omitempty"`
	MemMask              []byte    `protobuf:"bytes,6,req,name=MemMask" json:"MemMask,omitempty"`
	MemCnt               *int32    `protobuf:"varint,7,req,name=MemCnt" json:"MemCnt,omitempty"`
	Sign                 *SignData `protobuf:"bytes,8,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConsensusGroupInitedMessage) Reset()         { *m = ConsensusGroupInitedMessage{} }
func (m *ConsensusGroupInitedMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusGroupInitedMessage) ProtoMessage()    {}
func (*ConsensusGroupInitedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{32}
}
func (m *ConsensusGroupInitedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusGroupInitedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusGroupInitedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusGroupInitedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusGroupInitedMessage.Merge(m, src)
}
func (m *ConsensusGroupInitedMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusGroupInitedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusGroupInitedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusGroupInitedMessage proto.InternalMessageInfo

func (m *ConsensusGroupInitedMessage) GetGHash() []byte {
	if m != nil {
		return m.GHash
	}
	return nil
}

func (m *ConsensusGroupInitedMessage) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusGroupInitedMessage) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *ConsensusGroupInitedMessage) GetCreateHeight() uint64 {
	if m != nil && m.CreateHeight != nil {
		return *m.CreateHeight
	}
	return 0
}

func (m *ConsensusGroupInitedMessage) GetParentSign() []byte {
	if m != nil {
		return m.ParentSign
	}
	return nil
}

func (m *ConsensusGroupInitedMessage) GetMemMask() []byte {
	if m != nil {
		return m.MemMask
	}
	return nil
}

func (m *ConsensusGroupInitedMessage) GetMemCnt() int32 {
	if m != nil && m.MemCnt != nil {
		return *m.MemCnt
	}
	return 0
}

func (m *ConsensusGroupInitedMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusCurrentMessage struct {
	GroupID              []byte    `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	PreHash              []byte    `protobuf:"bytes,2,req,name=PreHash" json:"PreHash,omitempty"`
	PreTime              []byte    `protobuf:"bytes,3,req,name=PreTime" json:"PreTime,omitempty"`
	BlockHeight          *uint64   `protobuf:"varint,4,req,name=BlockHeight" json:"BlockHeight,omitempty"`
	Sign                 *SignData `protobuf:"bytes,6,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConsensusCurrentMessage) Reset()         { *m = ConsensusCurrentMessage{} }
func (m *ConsensusCurrentMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusCurrentMessage) ProtoMessage()    {}
func (*ConsensusCurrentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{33}
}
func (m *ConsensusCurrentMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCurrentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusCurrentMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusCurrentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCurrentMessage.Merge(m, src)
}
func (m *ConsensusCurrentMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCurrentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCurrentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCurrentMessage proto.InternalMessageInfo

func (m *ConsensusCurrentMessage) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusCurrentMessage) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

func (m *ConsensusCurrentMessage) GetPreTime() []byte {
	if m != nil {
		return m.PreTime
	}
	return nil
}

func (m *ConsensusCurrentMessage) GetBlockHeight() uint64 {
	if m != nil && m.BlockHeight != nil {
		return *m.BlockHeight
	}
	return 0
}

func (m *ConsensusCurrentMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusCastMessage struct {
	Bh                   *BlockHeader `protobuf:"bytes,1,req,name=Bh" json:"Bh,omitempty"`
	GroupID              []byte       `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	Sign                 *SignData    `protobuf:"bytes,3,req,name=Sign" json:"Sign,omitempty"`
	ProveHash            []byte       `protobuf:"bytes,4,req,name=ProveHash" json:"ProveHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ConsensusCastMessage) Reset()         { *m = ConsensusCastMessage{} }
func (m *ConsensusCastMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusCastMessage) ProtoMessage()    {}
func (*ConsensusCastMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{34}
}
func (m *ConsensusCastMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCastMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusCastMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusCastMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCastMessage.Merge(m, src)
}
func (m *ConsensusCastMessage) XXX_Size() int {
	return m.Size()
>>>>>>> origin/develop
}
func (m *ConsensusCastMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCastMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCastMessage proto.InternalMessageInfo

func (m *ConsensusCastMessage) GetBh() *BlockHeader {
	if m != nil {
		return m.Bh
	}
	return nil
}

func (m *ConsensusCastMessage) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusCastMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *ConsensusCastMessage) GetProveHash() []byte {
	if m != nil {
		return m.ProveHash
	}
	return nil
}

type ConsensusVerifyMessage struct {
	BlockHash            []byte    `protobuf:"bytes,1,req,name=BlockHash" json:"BlockHash,omitempty"`
	RandomSign           []byte    `protobuf:"bytes,2,req,name=RandomSign" json:"RandomSign,omitempty"`
	Sign                 *SignData `protobuf:"bytes,3,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConsensusVerifyMessage) Reset()         { *m = ConsensusVerifyMessage{} }
func (m *ConsensusVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusVerifyMessage) ProtoMessage()    {}
func (*ConsensusVerifyMessage) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{18}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{35}
>>>>>>> origin/develop
}
func (m *ConsensusVerifyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusVerifyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusVerifyMessage.Merge(m, src)
}
func (m *ConsensusVerifyMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusVerifyMessage proto.InternalMessageInfo

func (m *ConsensusVerifyMessage) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ConsensusVerifyMessage) GetRandomSign() []byte {
	if m != nil {
		return m.RandomSign
	}
	return nil
}

func (m *ConsensusVerifyMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

<<<<<<< HEAD
=======
type ConsensusBlockMessage struct {
	Block                *Block   `protobuf:"bytes,1,req,name=Block" json:"Block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusBlockMessage) Reset()         { *m = ConsensusBlockMessage{} }
func (m *ConsensusBlockMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusBlockMessage) ProtoMessage()    {}
func (*ConsensusBlockMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{36}
}
func (m *ConsensusBlockMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusBlockMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusBlockMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusBlockMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusBlockMessage.Merge(m, src)
}
func (m *ConsensusBlockMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusBlockMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusBlockMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusBlockMessage proto.InternalMessageInfo

func (m *ConsensusBlockMessage) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type ConsensusCreateGroupRawMessage struct {
	GInfo                *ConsensusGroupInitInfo `protobuf:"bytes,1,req,name=GInfo" json:"GInfo,omitempty"`
	Sign                 *SignData               `protobuf:"bytes,2,req,name=sign" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ConsensusCreateGroupRawMessage) Reset()         { *m = ConsensusCreateGroupRawMessage{} }
func (m *ConsensusCreateGroupRawMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusCreateGroupRawMessage) ProtoMessage()    {}
func (*ConsensusCreateGroupRawMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{37}
}
func (m *ConsensusCreateGroupRawMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCreateGroupRawMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusCreateGroupRawMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusCreateGroupRawMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCreateGroupRawMessage.Merge(m, src)
}
func (m *ConsensusCreateGroupRawMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCreateGroupRawMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCreateGroupRawMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCreateGroupRawMessage proto.InternalMessageInfo

func (m *ConsensusCreateGroupRawMessage) GetGInfo() *ConsensusGroupInitInfo {
	if m != nil {
		return m.GInfo
	}
	return nil
}

func (m *ConsensusCreateGroupRawMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusCreateGroupSignMessage struct {
	GHash                []byte    `protobuf:"bytes,1,req,name=GHash" json:"GHash,omitempty"`
	Sign                 *SignData `protobuf:"bytes,2,req,name=sign" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConsensusCreateGroupSignMessage) Reset()         { *m = ConsensusCreateGroupSignMessage{} }
func (m *ConsensusCreateGroupSignMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusCreateGroupSignMessage) ProtoMessage()    {}
func (*ConsensusCreateGroupSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{38}
}
func (m *ConsensusCreateGroupSignMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCreateGroupSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusCreateGroupSignMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusCreateGroupSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCreateGroupSignMessage.Merge(m, src)
}
func (m *ConsensusCreateGroupSignMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCreateGroupSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCreateGroupSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCreateGroupSignMessage proto.InternalMessageInfo

func (m *ConsensusCreateGroupSignMessage) GetGHash() []byte {
	if m != nil {
		return m.GHash
	}
	return nil
}

func (m *ConsensusCreateGroupSignMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

>>>>>>> origin/develop
type Reward struct {
	TxHash               []byte   `protobuf:"bytes,1,req,name=TxHash" json:"TxHash,omitempty"`
	TargetIds            []int32  `protobuf:"varint,2,rep,name=TargetIds" json:"TargetIds,omitempty"`
	BlockHash            []byte   `protobuf:"bytes,3,req,name=BlockHash" json:"BlockHash,omitempty"`
	GroupId              []byte   `protobuf:"bytes,4,req,name=GroupId" json:"GroupId,omitempty"`
	Sign                 []byte   `protobuf:"bytes,5,opt,name=Sign" json:"Sign,omitempty"`
	TotalValue           *uint64  `protobuf:"varint,6,req,name=TotalValue" json:"TotalValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reward) Reset()         { *m = Reward{} }
func (m *Reward) String() string { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()    {}
func (*Reward) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{19}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{39}
>>>>>>> origin/develop
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func (m *Reward) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Reward) GetTargetIds() []int32 {
	if m != nil {
		return m.TargetIds
	}
	return nil
}

func (m *Reward) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *Reward) GetGroupId() []byte {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *Reward) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Reward) GetTotalValue() uint64 {
	if m != nil && m.TotalValue != nil {
		return *m.TotalValue
	}
	return 0
}

type CastRewardTransSignReqMessage struct {
	Sign                 *SignData `protobuf:"bytes,1,req,name=Sign" json:"Sign,omitempty"`
	Reward               *Reward   `protobuf:"bytes,2,req,name=Reward" json:"Reward,omitempty"`
	SignedPieces         [][]byte  `protobuf:"bytes,3,rep,name=SignedPieces" json:"SignedPieces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CastRewardTransSignReqMessage) Reset()         { *m = CastRewardTransSignReqMessage{} }
func (m *CastRewardTransSignReqMessage) String() string { return proto.CompactTextString(m) }
func (*CastRewardTransSignReqMessage) ProtoMessage()    {}
func (*CastRewardTransSignReqMessage) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{20}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{40}
>>>>>>> origin/develop
}
func (m *CastRewardTransSignReqMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastRewardTransSignReqMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastRewardTransSignReqMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CastRewardTransSignReqMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastRewardTransSignReqMessage.Merge(m, src)
}
func (m *CastRewardTransSignReqMessage) XXX_Size() int {
	return m.Size()
}
func (m *CastRewardTransSignReqMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CastRewardTransSignReqMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CastRewardTransSignReqMessage proto.InternalMessageInfo

func (m *CastRewardTransSignReqMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *CastRewardTransSignReqMessage) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *CastRewardTransSignReqMessage) GetSignedPieces() [][]byte {
	if m != nil {
		return m.SignedPieces
	}
	return nil
}

type CastRewardTransSignMessage struct {
	Sign                 *SignData `protobuf:"bytes,1,req,name=Sign" json:"Sign,omitempty"`
	ReqHash              []byte    `protobuf:"bytes,2,req,name=ReqHash" json:"ReqHash,omitempty"`
	BlockHash            []byte    `protobuf:"bytes,3,req,name=BlockHash" json:"BlockHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CastRewardTransSignMessage) Reset()         { *m = CastRewardTransSignMessage{} }
func (m *CastRewardTransSignMessage) String() string { return proto.CompactTextString(m) }
func (*CastRewardTransSignMessage) ProtoMessage()    {}
func (*CastRewardTransSignMessage) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{21}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{41}
>>>>>>> origin/develop
}
func (m *CastRewardTransSignMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastRewardTransSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastRewardTransSignMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CastRewardTransSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastRewardTransSignMessage.Merge(m, src)
}
func (m *CastRewardTransSignMessage) XXX_Size() int {
	return m.Size()
}
func (m *CastRewardTransSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CastRewardTransSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CastRewardTransSignMessage proto.InternalMessageInfo

func (m *CastRewardTransSignMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *CastRewardTransSignMessage) GetReqHash() []byte {
	if m != nil {
		return m.ReqHash
	}
	return nil
}

func (m *CastRewardTransSignMessage) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type TopBlockInfo struct {
	TopHeader            *BlockHeader `protobuf:"bytes,1,req,name=TopHeader" json:"TopHeader,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TopBlockInfo) Reset()         { *m = TopBlockInfo{} }
func (m *TopBlockInfo) String() string { return proto.CompactTextString(m) }
func (*TopBlockInfo) ProtoMessage()    {}
func (*TopBlockInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{22}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{42}
>>>>>>> origin/develop
}
func (m *TopBlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopBlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopBlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopBlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopBlockInfo.Merge(m, src)
}
func (m *TopBlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *TopBlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TopBlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TopBlockInfo proto.InternalMessageInfo

func (m *TopBlockInfo) GetTopHeader() *BlockHeader {
	if m != nil {
		return m.TopHeader
	}
	return nil
}

type BlockResponseMsg struct {
	Blocks               []*Block `protobuf:"bytes,1,rep,name=Blocks" json:"Blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResponseMsg) Reset()         { *m = BlockResponseMsg{} }
func (m *BlockResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BlockResponseMsg) ProtoMessage()    {}
func (*BlockResponseMsg) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{23}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{43}
>>>>>>> origin/develop
}
func (m *BlockResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponseMsg.Merge(m, src)
}
func (m *BlockResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *BlockResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponseMsg proto.InternalMessageInfo

func (m *BlockResponseMsg) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type ChainPieceBlockMsg struct {
	TopHeader            *BlockHeader `protobuf:"bytes,1,req,name=TopHeader" json:"TopHeader,omitempty"`
	Blocks               []*Block     `protobuf:"bytes,2,rep,name=Blocks" json:"Blocks,omitempty"`
	FindAncestor         *bool        `protobuf:"varint,3,req,name=FindAncestor" json:"FindAncestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChainPieceBlockMsg) Reset()         { *m = ChainPieceBlockMsg{} }
func (m *ChainPieceBlockMsg) String() string { return proto.CompactTextString(m) }
func (*ChainPieceBlockMsg) ProtoMessage()    {}
func (*ChainPieceBlockMsg) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{24}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{44}
>>>>>>> origin/develop
}
func (m *ChainPieceBlockMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainPieceBlockMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainPieceBlockMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainPieceBlockMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainPieceBlockMsg.Merge(m, src)
}
func (m *ChainPieceBlockMsg) XXX_Size() int {
	return m.Size()
}
func (m *ChainPieceBlockMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainPieceBlockMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ChainPieceBlockMsg proto.InternalMessageInfo

func (m *ChainPieceBlockMsg) GetTopHeader() *BlockHeader {
	if m != nil {
		return m.TopHeader
	}
	return nil
}

func (m *ChainPieceBlockMsg) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *ChainPieceBlockMsg) GetFindAncestor() bool {
	if m != nil && m.FindAncestor != nil {
		return *m.FindAncestor
	}
	return false
}

<<<<<<< HEAD
=======
type CreateGroupPingMessage struct {
	FromGroupID          []byte    `protobuf:"bytes,1,req,name=FromGroupID" json:"FromGroupID,omitempty"`
	PingID               *string   `protobuf:"bytes,2,req,name=PingID" json:"PingID,omitempty"`
	BaseHeight           *uint64   `protobuf:"varint,3,req,name=BaseHeight" json:"BaseHeight,omitempty"`
	Sign                 *SignData `protobuf:"bytes,4,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateGroupPingMessage) Reset()         { *m = CreateGroupPingMessage{} }
func (m *CreateGroupPingMessage) String() string { return proto.CompactTextString(m) }
func (*CreateGroupPingMessage) ProtoMessage()    {}
func (*CreateGroupPingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{45}
}
func (m *CreateGroupPingMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGroupPingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGroupPingMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGroupPingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroupPingMessage.Merge(m, src)
}
func (m *CreateGroupPingMessage) XXX_Size() int {
	return m.Size()
}
func (m *CreateGroupPingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroupPingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroupPingMessage proto.InternalMessageInfo

func (m *CreateGroupPingMessage) GetFromGroupID() []byte {
	if m != nil {
		return m.FromGroupID
	}
	return nil
}

func (m *CreateGroupPingMessage) GetPingID() string {
	if m != nil && m.PingID != nil {
		return *m.PingID
	}
	return ""
}

func (m *CreateGroupPingMessage) GetBaseHeight() uint64 {
	if m != nil && m.BaseHeight != nil {
		return *m.BaseHeight
	}
	return 0
}

func (m *CreateGroupPingMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type CreateGroupPongMessage struct {
	PingID               *string   `protobuf:"bytes,1,req,name=PingID" json:"PingID,omitempty"`
	Ts                   []byte    `protobuf:"bytes,2,req,name=Ts" json:"Ts,omitempty"`
	Sign                 *SignData `protobuf:"bytes,3,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateGroupPongMessage) Reset()         { *m = CreateGroupPongMessage{} }
func (m *CreateGroupPongMessage) String() string { return proto.CompactTextString(m) }
func (*CreateGroupPongMessage) ProtoMessage()    {}
func (*CreateGroupPongMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{46}
}
func (m *CreateGroupPongMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGroupPongMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGroupPongMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGroupPongMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroupPongMessage.Merge(m, src)
}
func (m *CreateGroupPongMessage) XXX_Size() int {
	return m.Size()
}
func (m *CreateGroupPongMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroupPongMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroupPongMessage proto.InternalMessageInfo

func (m *CreateGroupPongMessage) GetPingID() string {
	if m != nil && m.PingID != nil {
		return *m.PingID
	}
	return ""
}

func (m *CreateGroupPongMessage) GetTs() []byte {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *CreateGroupPongMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ReqSharePieceMessage struct {
	GHash                []byte    `protobuf:"bytes,1,req,name=GHash" json:"GHash,omitempty"`
	Sign                 *SignData `protobuf:"bytes,2,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqSharePieceMessage) Reset()         { *m = ReqSharePieceMessage{} }
func (m *ReqSharePieceMessage) String() string { return proto.CompactTextString(m) }
func (*ReqSharePieceMessage) ProtoMessage()    {}
func (*ReqSharePieceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{47}
}
func (m *ReqSharePieceMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSharePieceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSharePieceMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSharePieceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSharePieceMessage.Merge(m, src)
}
func (m *ReqSharePieceMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqSharePieceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSharePieceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSharePieceMessage proto.InternalMessageInfo

func (m *ReqSharePieceMessage) GetGHash() []byte {
	if m != nil {
		return m.GHash
	}
	return nil
}

func (m *ReqSharePieceMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ResponseSharePieceMessage struct {
	GHash                []byte      `protobuf:"bytes,1,req,name=GHash" json:"GHash,omitempty"`
	SharePiece           *SharePiece `protobuf:"bytes,2,req,name=SharePiece" json:"SharePiece,omitempty"`
	Sign                 *SignData   `protobuf:"bytes,3,req,name=Sign" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResponseSharePieceMessage) Reset()         { *m = ResponseSharePieceMessage{} }
func (m *ResponseSharePieceMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseSharePieceMessage) ProtoMessage()    {}
func (*ResponseSharePieceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_045c4e31cfb1792c, []int{48}
}
func (m *ResponseSharePieceMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSharePieceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSharePieceMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSharePieceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSharePieceMessage.Merge(m, src)
}
func (m *ResponseSharePieceMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSharePieceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSharePieceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSharePieceMessage proto.InternalMessageInfo

func (m *ResponseSharePieceMessage) GetGHash() []byte {
	if m != nil {
		return m.GHash
	}
	return nil
}

func (m *ResponseSharePieceMessage) GetSharePiece() *SharePiece {
	if m != nil {
		return m.SharePiece
	}
	return nil
}

func (m *ResponseSharePieceMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

>>>>>>> origin/develop
type ReqProposalBlockMessage struct {
	Hash                 []byte   `protobuf:"bytes,1,req,name=Hash" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqProposalBlockMessage) Reset()         { *m = ReqProposalBlockMessage{} }
func (m *ReqProposalBlockMessage) String() string { return proto.CompactTextString(m) }
func (*ReqProposalBlockMessage) ProtoMessage()    {}
func (*ReqProposalBlockMessage) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{25}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{49}
>>>>>>> origin/develop
}
func (m *ReqProposalBlockMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqProposalBlockMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqProposalBlockMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqProposalBlockMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqProposalBlockMessage.Merge(m, src)
}
func (m *ReqProposalBlockMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqProposalBlockMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqProposalBlockMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqProposalBlockMessage proto.InternalMessageInfo

func (m *ReqProposalBlockMessage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ResponseProposalBlockMessage struct {
	Hash                 []byte         `protobuf:"bytes,1,req,name=Hash" json:"Hash,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,2,rep,name=Transactions" json:"Transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResponseProposalBlockMessage) Reset()         { *m = ResponseProposalBlockMessage{} }
func (m *ResponseProposalBlockMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseProposalBlockMessage) ProtoMessage()    {}
func (*ResponseProposalBlockMessage) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_tas_a31bc5c5f5ec71ef, []int{26}
=======
	return fileDescriptor_045c4e31cfb1792c, []int{50}
>>>>>>> origin/develop
}
func (m *ResponseProposalBlockMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseProposalBlockMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseProposalBlockMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseProposalBlockMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseProposalBlockMessage.Merge(m, src)
}
func (m *ResponseProposalBlockMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResponseProposalBlockMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseProposalBlockMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseProposalBlockMessage proto.InternalMessageInfo

func (m *ResponseProposalBlockMessage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ResponseProposalBlockMessage) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "tas.middleware.pb.Message")
	proto.RegisterType((*Transaction)(nil), "tas.middleware.pb.Transaction")
	proto.RegisterType((*TransactionRequestMessage)(nil), "tas.middleware.pb.TransactionRequestMessage")
	proto.RegisterType((*TrieNodes)(nil), "tas.middleware.pb.TrieNodes")
	proto.RegisterType((*TransactionSlice)(nil), "tas.middleware.pb.TransactionSlice")
	proto.RegisterType((*ChainPieceReq)(nil), "tas.middleware.pb.ChainPieceReq")
	proto.RegisterType((*SyncRequest)(nil), "tas.middleware.pb.SyncRequest")
	proto.RegisterType((*BlockHeader)(nil), "tas.middleware.pb.BlockHeader")
	proto.RegisterType((*Block)(nil), "tas.middleware.pb.Block")
	proto.RegisterType((*BlockSlice)(nil), "tas.middleware.pb.BlockSlice")
	proto.RegisterType((*Hashes)(nil), "tas.middleware.pb.Hashes")
	proto.RegisterType((*TotalQnInfo)(nil), "tas.middleware.pb.TotalQnInfo")
	proto.RegisterType((*StateInfoReq)(nil), "tas.middleware.pb.StateInfoReq")
	proto.RegisterType((*StateInfo)(nil), "tas.middleware.pb.StateInfo")
	proto.RegisterType((*TrieNode)(nil), "tas.middleware.pb.TrieNode")
	proto.RegisterType((*SignData)(nil), "tas.middleware.pb.SignData")
	proto.RegisterType((*PubKeyInfo)(nil), "tas.middleware.pb.PubKeyInfo")
	proto.RegisterType((*ConsensusCastMessage)(nil), "tas.middleware.pb.ConsensusCastMessage")
	proto.RegisterType((*ConsensusVerifyMessage)(nil), "tas.middleware.pb.ConsensusVerifyMessage")
	proto.RegisterType((*Reward)(nil), "tas.middleware.pb.Reward")
	proto.RegisterType((*CastRewardTransSignReqMessage)(nil), "tas.middleware.pb.CastRewardTransSignReqMessage")
	proto.RegisterType((*CastRewardTransSignMessage)(nil), "tas.middleware.pb.CastRewardTransSignMessage")
	proto.RegisterType((*TopBlockInfo)(nil), "tas.middleware.pb.TopBlockInfo")
	proto.RegisterType((*BlockResponseMsg)(nil), "tas.middleware.pb.BlockResponseMsg")
	proto.RegisterType((*ChainPieceBlockMsg)(nil), "tas.middleware.pb.ChainPieceBlockMsg")
	proto.RegisterType((*ReqProposalBlockMessage)(nil), "tas.middleware.pb.ReqProposalBlockMessage")
	proto.RegisterType((*ResponseProposalBlockMessage)(nil), "tas.middleware.pb.ResponseProposalBlockMessage")
}

<<<<<<< HEAD
func init() { proto.RegisterFile("tas.proto", fileDescriptor_tas_a31bc5c5f5ec71ef) }

var fileDescriptor_tas_a31bc5c5f5ec71ef = []byte{
	// 1233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4b, 0x6f, 0x23, 0xc5,
	0x13, 0xd7, 0x8c, 0x1f, 0xb1, 0xcb, 0xde, 0xfd, 0x67, 0x47, 0xab, 0xfc, 0x67, 0xb3, 0x4b, 0x64,
	0x35, 0x17, 0x0b, 0x41, 0x08, 0x39, 0x20, 0xb1, 0x42, 0xac, 0xd6, 0xce, 0x63, 0xa3, 0x25, 0xc1,
	0x74, 0xac, 0xdc, 0x27, 0x9e, 0x5a, 0x7b, 0xc0, 0x99, 0xb1, 0x7b, 0xc6, 0xcb, 0x9a, 0x0b, 0x07,
	0x84, 0xf8, 0x28, 0x20, 0x38, 0xf0, 0x49, 0xf8, 0x3c, 0x5c, 0x51, 0x55, 0x77, 0x7b, 0x66, 0xf2,
	0x58, 0x92, 0x9c, 0xdc, 0xbf, 0xaa, 0xa9, 0xee, 0x7a, 0xfc, 0xaa, 0xba, 0x0d, 0xcd, 0x2c, 0x48,
	0xb7, 0x67, 0x2a, 0xc9, 0x12, 0xef, 0x11, 0x2d, 0x2f, 0xa2, 0x30, 0x9c, 0xe2, 0x0f, 0x81, 0xc2,
	0xed, 0xd9, 0xb9, 0xf8, 0x06, 0xd6, 0x8e, 0x31, 0x4d, 0x83, 0x31, 0x7a, 0x1e, 0x54, 0xfb, 0x49,
	0x88, 0xbe, 0xd3, 0x71, 0xbb, 0x0f, 0x24, 0xaf, 0xbd, 0x67, 0xd0, 0x3c, 0x8d, 0xc6, 0x71, 0x90,
	0x2d, 0x14, 0xfa, 0x6e, 0xc7, 0xe9, 0xb6, 0x65, 0x2e, 0x20, 0x8b, 0x5e, 0x12, 0x2e, 0xfd, 0x0a,
	0x2b, 0x78, 0x2d, 0xfe, 0x71, 0xa0, 0x35, 0x54, 0x41, 0x9c, 0x06, 0xa3, 0x2c, 0x4a, 0x62, 0xfa,
	0x66, 0x2f, 0xc8, 0x02, 0xdf, 0xd1, 0xdf, 0xd0, 0xda, 0x7b, 0x0c, 0xb5, 0xb3, 0x60, 0xba, 0xb0,
	0x3b, 0x6a, 0x40, 0xd2, 0x93, 0x24, 0x1e, 0xa1, 0x5f, 0xe9, 0xb8, 0xdd, 0xaa, 0xd4, 0xc0, 0xdb,
	0x80, 0xfa, 0x30, 0x50, 0x63, 0xcc, 0xfc, 0x2a, 0x7f, 0x6c, 0x90, 0xb7, 0x09, 0x8d, 0xc3, 0x20,
	0xfd, 0x3a, 0xba, 0x88, 0x32, 0xbf, 0xd6, 0x71, 0xbb, 0x6d, 0xb9, 0xc2, 0x46, 0x37, 0x50, 0xd1,
	0x08, 0xfd, 0xfa, 0x4a, 0xc7, 0x98, 0xfc, 0x79, 0x15, 0xa4, 0x13, 0x7f, 0x8d, 0xe5, 0xbc, 0xa6,
	0x28, 0xf7, 0xdf, 0x65, 0x2a, 0x60, 0x47, 0x1b, 0x3a, 0xca, 0x95, 0x80, 0x2c, 0x86, 0xcb, 0x19,
	0xfa, 0xcd, 0x8e, 0xdb, 0xad, 0x49, 0x5e, 0x93, 0x8c, 0xd2, 0xe0, 0x83, 0x8e, 0x8a, 0xd6, 0x62,
	0x01, 0x4f, 0x0a, 0x81, 0x4b, 0x9c, 0x2f, 0x30, 0xcd, 0x6c, 0x72, 0x3f, 0x86, 0x47, 0x05, 0x25,
	0x9d, 0x8a, 0xa9, 0xef, 0x74, 0x2a, 0xdd, 0xb6, 0xbc, 0xaa, 0xf0, 0x3e, 0x82, 0xf5, 0xfe, 0x42,
	0x29, 0x8c, 0xb3, 0xde, 0x34, 0x19, 0x7d, 0xcf, 0x0e, 0xbb, 0xec, 0xf0, 0x15, 0xb9, 0x38, 0x80,
	0xe6, 0x50, 0x45, 0x78, 0x92, 0x84, 0x98, 0x7a, 0x5f, 0x14, 0x00, 0x6f, 0xdf, 0xda, 0x7d, 0xba,
	0x7d, 0xa5, 0xea, 0xdb, 0xf6, 0x1b, 0x99, 0x7f, 0x2d, 0xce, 0x60, 0xbd, 0xe0, 0xc8, 0xe9, 0x94,
	0x92, 0xd5, 0x83, 0x76, 0x96, 0xcb, 0xec, 0x8e, 0x5b, 0xd7, 0xee, 0x98, 0x47, 0x5e, 0xb2, 0x11,
	0x2f, 0xe0, 0x41, 0x7f, 0x12, 0x44, 0xf1, 0x20, 0xc2, 0x11, 0x4a, 0x9c, 0x53, 0x45, 0x79, 0x6d,
	0xe3, 0x37, 0x88, 0xe4, 0x12, 0xe7, 0xfd, 0x38, 0x63, 0x5a, 0xd4, 0xa4, 0x41, 0x62, 0x1f, 0x5a,
	0xa7, 0xcb, 0x78, 0x64, 0x12, 0x4a, 0xc5, 0x92, 0x38, 0x7f, 0x85, 0xd1, 0x78, 0x92, 0x31, 0x57,
	0xab, 0x32, 0x17, 0x78, 0x3e, 0xac, 0x49, 0x9c, 0x9f, 0x46, 0x3f, 0x22, 0x27, 0xac, 0x26, 0x2d,
	0x14, 0x7f, 0x57, 0xa0, 0xa5, 0xb3, 0x86, 0x41, 0x88, 0x6a, 0x45, 0x04, 0x43, 0x4c, 0x26, 0xc2,
	0x06, 0xd4, 0xcd, 0xc6, 0xe4, 0x42, 0x55, 0xd6, 0xf3, 0x5d, 0x07, 0x0a, 0xf9, 0x73, 0xcd, 0x75,
	0x0b, 0x49, 0xb3, 0x3f, 0x0d, 0x66, 0x29, 0x86, 0xcc, 0xcf, 0x9a, 0xb4, 0xd0, 0xdb, 0x02, 0x18,
	0xa8, 0xe4, 0x2d, 0x6a, 0xa6, 0xd7, 0xd8, 0xac, 0x20, 0x21, 0xcb, 0x61, 0x92, 0x05, 0xd3, 0x6f,
	0x4f, 0xfc, 0x3a, 0x1f, 0x66, 0x21, 0x69, 0xfa, 0x0b, 0x35, 0x8c, 0x2e, 0xd0, 0x5f, 0xeb, 0x38,
	0xdd, 0x8a, 0xb4, 0x90, 0xfc, 0xeb, 0x07, 0x69, 0x96, 0x28, 0xc3, 0x52, 0x83, 0xc8, 0xe2, 0x50,
	0x25, 0x8b, 0xd9, 0x51, 0xe8, 0x37, 0xb5, 0x7f, 0x06, 0x96, 0x1b, 0x18, 0x2e, 0x37, 0xf0, 0xaa,
	0xe5, 0x5a, 0xec, 0x7b, 0xa1, 0xe5, 0xde, 0x0d, 0x15, 0xa2, 0xdf, 0x36, 0x2d, 0xc7, 0xc8, 0xeb,
	0x40, 0x4b, 0xe2, 0x08, 0xa3, 0x59, 0xc6, 0xca, 0x07, 0xac, 0x2c, 0x8a, 0xf8, 0xb4, 0x2c, 0xc8,
	0x90, 0xf5, 0x0f, 0xcd, 0x69, 0x56, 0x50, 0x6e, 0xb3, 0xff, 0x5d, 0x6e, 0x33, 0x2a, 0x7f, 0x10,
	0x87, 0xc9, 0x85, 0xbf, 0xae, 0x4f, 0xd5, 0x88, 0xe4, 0x87, 0x41, 0x7a, 0x80, 0xe8, 0x3f, 0xd2,
	0x35, 0xd1, 0x48, 0xfc, 0xec, 0x40, 0x8d, 0xeb, 0xe9, 0x7d, 0x4e, 0x55, 0xa3, 0x9a, 0x32, 0x1d,
	0xae, 0xe7, 0x67, 0xa1, 0xf2, 0xd2, 0x7c, 0x7d, 0x85, 0xdd, 0xee, 0x3d, 0xd8, 0xfd, 0x15, 0x00,
	0x6f, 0xad, 0xfb, 0x65, 0x07, 0xea, 0x8c, 0x6c, 0xa7, 0xf8, 0x37, 0x79, 0x22, 0xcd, 0x77, 0xa2,
	0x03, 0x75, 0xd3, 0xf3, 0x1b, 0x50, 0x9f, 0x14, 0xc7, 0x82, 0x41, 0xe2, 0x05, 0xb4, 0x34, 0x31,
	0xe2, 0xa3, 0xf8, 0x4d, 0x92, 0xd3, 0x26, 0x36, 0xe4, 0xb7, 0xb0, 0x44, 0x5e, 0x37, 0x27, 0xaf,
	0xf8, 0xd3, 0x81, 0x36, 0x17, 0x81, 0xec, 0x4d, 0x03, 0x96, 0xda, 0xc7, 0xb2, 0xfc, 0x10, 0xda,
	0xc3, 0x72, 0x3e, 0x9c, 0x6e, 0x6b, 0xf7, 0xc3, 0xf7, 0xe7, 0x83, 0x03, 0x97, 0x25, 0x43, 0x2a,
	0xf4, 0xcb, 0x30, 0x54, 0x98, 0xa6, 0x98, 0xfa, 0x15, 0x8e, 0x26, 0x17, 0x90, 0x36, 0x9f, 0x6a,
	0x55, 0x9e, 0x6a, 0xb9, 0x40, 0xfc, 0xe1, 0x18, 0x0e, 0x71, 0xb4, 0x37, 0xb9, 0x5a, 0x9a, 0x73,
	0xee, 0x5d, 0xe6, 0x5c, 0xf9, 0xf8, 0xca, 0xa5, 0xe3, 0x69, 0x4e, 0x0f, 0x54, 0xa2, 0x4b, 0x4a,
	0x5e, 0xc8, 0x24, 0xc9, 0x8c, 0x93, 0x57, 0x15, 0x62, 0x07, 0x1a, 0x76, 0x63, 0x6f, 0x1d, 0x2a,
	0xaf, 0x71, 0xc9, 0x7e, 0xb6, 0x25, 0x2d, 0x57, 0x57, 0x9f, 0x9e, 0xdc, 0xbc, 0x16, 0x3f, 0x41,
	0x83, 0xda, 0x8f, 0x19, 0xbf, 0x09, 0x0d, 0xfa, 0x35, 0x53, 0x88, 0xaf, 0x29, 0x8b, 0xad, 0x8e,
	0x2f, 0x19, 0x37, 0xd7, 0x11, 0xa6, 0xc9, 0x42, 0xbf, 0xc7, 0x78, 0x71, 0x8e, 0xca, 0x84, 0x50,
	0x90, 0x78, 0x4f, 0x61, 0xed, 0x0c, 0x55, 0x1a, 0x25, 0xb1, 0x9e, 0x49, 0xcf, 0x9d, 0x1d, 0x69,
	0x25, 0xe2, 0x39, 0xc0, 0x60, 0x71, 0xfe, 0x1a, 0x97, 0x9c, 0xdf, 0x87, 0xe0, 0x1e, 0xed, 0x99,
	0xc3, 0xdd, 0xa3, 0x3d, 0x4a, 0xce, 0x60, 0x71, 0x3e, 0x8d, 0x46, 0x14, 0x8a, 0x3e, 0x37, 0x17,
	0x88, 0xbf, 0x1c, 0x78, 0xdc, 0x4f, 0xe2, 0x14, 0xe3, 0x74, 0x91, 0xd2, 0xe8, 0xb1, 0xb7, 0xdb,
	0x36, 0xb8, 0xbd, 0xc9, 0x2d, 0xbb, 0xcf, 0xed, 0x4d, 0xf2, 0x79, 0xb5, 0x67, 0x9e, 0x00, 0x16,
	0x7a, 0x9f, 0x9a, 0x8b, 0xb5, 0xc2, 0x7b, 0x5d, 0x57, 0x53, 0x9b, 0x3e, 0x7d, 0xeb, 0xb2, 0xc7,
	0x34, 0x54, 0x8b, 0x6c, 0x5a, 0x09, 0xc4, 0xaf, 0x0e, 0x6c, 0xac, 0x3c, 0x3e, 0x43, 0x15, 0xbd,
	0x59, 0x5a, 0x9f, 0x4b, 0x3c, 0x70, 0x2e, 0xf3, 0x60, 0x0b, 0x40, 0xcf, 0x9f, 0x42, 0x05, 0x0a,
	0x92, 0x3b, 0xfb, 0x49, 0xbc, 0xae, 0x4b, 0x52, 0x86, 0x7a, 0xbe, 0x16, 0x8e, 0x35, 0x88, 0x3c,
	0xd2, 0x8f, 0x9b, 0xa3, 0x50, 0x93, 0xba, 0x26, 0x73, 0xc1, 0x7f, 0xf0, 0xb6, 0x70, 0x03, 0xe8,
	0x24, 0xac, 0x6e, 0x00, 0xfb, 0x54, 0xa9, 0xe5, 0x4f, 0x15, 0x8a, 0x8e, 0xa7, 0x86, 0xbe, 0x9b,
	0xea, 0xdc, 0x5a, 0x05, 0x89, 0xf8, 0xcd, 0x81, 0x0f, 0xa8, 0xbe, 0xda, 0x61, 0xee, 0x6d, 0xb2,
	0x93, 0x38, 0xb7, 0xd9, 0xb3, 0xf1, 0x3b, 0xb7, 0xad, 0xd3, 0x67, 0x36, 0x7c, 0x4e, 0x66, 0x6b,
	0xf7, 0xc9, 0x35, 0x26, 0xfa, 0x03, 0x69, 0xf3, 0x24, 0xa0, 0x4d, 0xa6, 0x18, 0x9a, 0xe7, 0x82,
	0x9e, 0x24, 0x25, 0x99, 0xf8, 0xc5, 0x81, 0xcd, 0x6b, 0x3c, 0xbd, 0xb7, 0x9b, 0xfa, 0xfd, 0x50,
	0x78, 0x70, 0x59, 0xf8, 0xfe, 0xfc, 0x8b, 0xef, 0xa0, 0x3d, 0x4c, 0x66, 0x8c, 0xb9, 0xb1, 0xf2,
	0xd7, 0x45, 0xfe, 0xcc, 0x2c, 0x8c, 0x6e, 0xf7, 0xa6, 0xd1, 0x5d, 0x29, 0x8d, 0xb9, 0xc7, 0x50,
	0x1b, 0x9c, 0xf5, 0xa2, 0xb1, 0xa9, 0xa9, 0x06, 0x62, 0x0f, 0xd6, 0xf5, 0x25, 0x82, 0xe9, 0x8c,
	0xb8, 0x7d, 0x9c, 0x8e, 0xef, 0x71, 0xf3, 0xfc, 0xee, 0x80, 0x97, 0x3f, 0xcc, 0x58, 0x48, 0x1b,
	0x7d, 0x09, 0xcd, 0x61, 0x32, 0xbb, 0xd3, 0x7d, 0x9a, 0x1b, 0x14, 0xdc, 0x70, 0x6f, 0xe7, 0x06,
	0x15, 0xf9, 0x20, 0x8a, 0xc3, 0x97, 0xf1, 0x08, 0xf9, 0x61, 0x43, 0x09, 0x68, 0xc8, 0x92, 0x4c,
	0x7c, 0x02, 0xff, 0x97, 0x38, 0x1f, 0xa8, 0x64, 0x96, 0xa4, 0xc1, 0x54, 0xbb, 0x9a, 0xff, 0x69,
	0xb9, 0x9c, 0x67, 0xf1, 0x16, 0x9e, 0xd9, 0xd4, 0xdc, 0xd6, 0x86, 0xde, 0x02, 0xc3, 0x7b, 0xbc,
	0x05, 0x8a, 0x36, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x6c, 0x19, 0x3c, 0x6a, 0x0d, 0x00,
	0x00,
=======
func init() { proto.RegisterFile("tas.proto", fileDescriptor_045c4e31cfb1792c) }

var fileDescriptor_045c4e31cfb1792c = []byte{
	// 2055 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xbd, 0x93, 0x1b, 0x49,
	0x15, 0x67, 0x46, 0x1f, 0xbb, 0x7a, 0x92, 0xcd, 0x7a, 0xca, 0xf8, 0xc6, 0xf6, 0x79, 0x4f, 0xd5,
	0x10, 0x88, 0x2b, 0xb3, 0x98, 0x0b, 0xa0, 0xb8, 0xba, 0xc3, 0x75, 0xda, 0xb5, 0x75, 0x5b, 0xbe,
	0x35, 0xa2, 0x57, 0x65, 0x22, 0xa8, 0x1a, 0x6b, 0xfa, 0xb4, 0xc3, 0xae, 0x66, 0xa4, 0xe9, 0xd1,
	0x9d, 0x45, 0x42, 0x40, 0x51, 0x24, 0x14, 0x01, 0x11, 0x09, 0x01, 0x45, 0x00, 0x75, 0x04, 0x44,
	0x24, 0x64, 0x64, 0x24, 0x50, 0xfc, 0x09, 0x94, 0x09, 0xf9, 0x27, 0xa8, 0xf7, 0xba, 0x7b, 0xa6,
	0x47, 0xd2, 0x2e, 0xa3, 0xa5, 0x2e, 0xd2, 0xbc, 0xd7, 0x5f, 0xef, 0xe3, 0xf7, 0x3e, 0xba, 0x05,
	0xad, 0x2c, 0x90, 0x07, 0xb3, 0x34, 0xc9, 0x12, 0xef, 0x16, 0x7e, 0x4e, 0xa3, 0x30, 0xbc, 0x10,
	0x9f, 0x06, 0xa9, 0x38, 0x98, 0xbd, 0x64, 0xdf, 0x85, 0x9d, 0x13, 0x21, 0x65, 0x30, 0x11, 0x9e,
	0x07, 0xf5, 0xc3, 0x24, 0x14, 0xbe, 0xd3, 0x75, 0x7b, 0x37, 0x38, 0x7d, 0x7b, 0x6f, 0x42, 0xeb,
	0x34, 0x9a, 0xc4, 0x41, 0xb6, 0x48, 0x85, 0xef, 0x76, 0x9d, 0x5e, 0x87, 0x17, 0x0c, 0x5c, 0xd1,
	0x4f, 0xc2, 0xa5, 0x5f, 0xa3, 0x01, 0xfa, 0x66, 0xbf, 0x71, 0xa1, 0x3d, 0x4a, 0x83, 0x58, 0x06,
	0xe3, 0x2c, 0x4a, 0x62, 0x9c, 0x73, 0x14, 0x64, 0x81, 0xef, 0xa8, 0x39, 0xf8, 0xed, 0xdd, 0x86,
	0xc6, 0x8b, 0xe0, 0x62, 0x61, 0x76, 0x54, 0x04, 0x72, 0x9f, 0x27, 0xf1, 0x58, 0xf8, 0xb5, 0xae,
	0xdb, 0xab, 0x73, 0x45, 0x78, 0x77, 0xa0, 0x39, 0x0a, 0xd2, 0x89, 0xc8, 0xfc, 0x3a, 0x4d, 0xd6,
	0x94, 0x77, 0x0f, 0x76, 0x07, 0x81, 0xfc, 0x28, 0x9a, 0x46, 0x99, 0xdf, 0xe8, 0xba, 0xbd, 0x0e,
	0xcf, 0x69, 0x3d, 0x36, 0x4c, 0xa3, 0xb1, 0xf0, 0x9b, 0xf9, 0x18, 0xd1, 0x28, 0xcf, 0x87, 0x81,
	0x3c, 0xf3, 0x77, 0x88, 0x4f, 0xdf, 0xa8, 0xe5, 0x93, 0x57, 0x59, 0x1a, 0x90, 0xa0, 0xbb, 0x4a,
	0xcb, 0x9c, 0xe1, 0x7d, 0x05, 0x6e, 0xe4, 0xc4, 0x68, 0x39, 0x13, 0x7e, 0xab, 0xeb, 0xf4, 0x1a,
	0xbc, 0xcc, 0xc4, 0x7d, 0x69, 0x10, 0xba, 0x6e, 0xaf, 0xc1, 0xeb, 0x86, 0x87, 0xc6, 0xf2, 0xdb,
	0x4a, 0x77, 0xfc, 0x66, 0x0b, 0xb8, 0x6b, 0x99, 0x87, 0x8b, 0xf9, 0x42, 0xc8, 0xcc, 0xb8, 0xe0,
	0x21, 0xdc, 0xb2, 0x06, 0x51, 0x36, 0x21, 0x7d, 0xa7, 0x5b, 0xeb, 0x75, 0xf8, 0xfa, 0x80, 0xf7,
	0x36, 0xec, 0x1d, 0x2e, 0xd2, 0x54, 0xc4, 0x59, 0xff, 0x22, 0x19, 0x9f, 0x93, 0x5a, 0x2e, 0xa9,
	0xb5, 0xc6, 0x67, 0x4f, 0xa1, 0x35, 0x4a, 0x23, 0xf1, 0x3c, 0x09, 0x85, 0xf4, 0xbe, 0x6d, 0x11,
	0xb4, 0x7d, 0xfb, 0x9d, 0xfb, 0x07, 0x6b, 0xd8, 0x38, 0x30, 0x73, 0x78, 0x31, 0x9b, 0xbd, 0x80,
	0x3d, 0x4b, 0x90, 0xd3, 0x0b, 0x34, 0x69, 0x1f, 0x3a, 0x59, 0xc1, 0x33, 0x3b, 0xee, 0x6f, 0xdc,
	0xb1, 0xd0, 0xbc, 0xb4, 0x86, 0x3d, 0x86, 0x1b, 0x87, 0x67, 0x41, 0x14, 0x0f, 0x23, 0x31, 0x16,
	0x5c, 0xcc, 0xd1, 0xef, 0xf4, 0x6d, 0xf4, 0xd7, 0x14, 0xf2, 0xb9, 0x98, 0x1f, 0xc6, 0x19, 0x81,
	0xa7, 0xc1, 0x35, 0xc5, 0x9e, 0x40, 0xfb, 0x74, 0x19, 0x8f, 0xb5, 0x41, 0xd1, 0xa5, 0x5c, 0xcc,
	0x3f, 0x14, 0xd1, 0xe4, 0x2c, 0x23, 0x44, 0xd7, 0x79, 0xc1, 0xf0, 0x7c, 0xd8, 0xe1, 0x62, 0x7e,
	0x1a, 0xfd, 0x58, 0x90, 0xc1, 0x1a, 0xdc, 0x90, 0xec, 0xef, 0x35, 0x68, 0x2b, 0xab, 0x89, 0x20,
	0x14, 0x69, 0x0e, 0x17, 0x0d, 0x5f, 0x82, 0xcb, 0x1d, 0x68, 0xea, 0x8d, 0x51, 0x84, 0x3a, 0x6f,
	0x16, 0xbb, 0x0e, 0x53, 0x41, 0xd3, 0x55, 0x44, 0x18, 0x12, 0x47, 0x9e, 0x5c, 0x04, 0x33, 0x29,
	0x42, 0x42, 0x71, 0x83, 0x1b, 0xd2, 0xdb, 0x07, 0x18, 0xa6, 0xc9, 0x27, 0x42, 0xc5, 0x43, 0x83,
	0x96, 0x59, 0x1c, 0x5c, 0x39, 0x4a, 0xb2, 0xe0, 0xe2, 0x7b, 0xcf, 0xfd, 0x26, 0x1d, 0x66, 0x48,
	0x1c, 0x39, 0x5c, 0xa4, 0xa3, 0x68, 0x2a, 0xfc, 0x9d, 0xae, 0xd3, 0xab, 0x71, 0x43, 0xa2, 0x7c,
	0x87, 0x81, 0xcc, 0x92, 0x54, 0x63, 0x59, 0x53, 0xb8, 0x62, 0x90, 0x26, 0x8b, 0xd9, 0x71, 0x48,
	0x10, 0xee, 0x70, 0x43, 0x96, 0xc3, 0x1c, 0x56, 0xc3, 0x3c, 0x0f, 0xcc, 0x36, 0xc9, 0x6e, 0x05,
	0xe6, 0xab, 0x51, 0x2a, 0x84, 0xdf, 0xd1, 0x81, 0x49, 0x94, 0xd7, 0x85, 0x36, 0x17, 0x63, 0x11,
	0xcd, 0x32, 0x1a, 0xbc, 0x41, 0x83, 0x36, 0x8b, 0x4e, 0xcb, 0x82, 0x4c, 0xd0, 0xf8, 0x4d, 0x7d,
	0x9a, 0x61, 0x94, 0x83, 0xf1, 0x8b, 0xab, 0xc1, 0x88, 0xee, 0x0f, 0xe2, 0x30, 0x99, 0xfa, 0x7b,
	0xea, 0x54, 0x45, 0x21, 0x7f, 0x10, 0xc8, 0xa7, 0x42, 0xf8, 0xb7, 0x94, 0x4f, 0x14, 0xc5, 0x7e,
	0xea, 0x40, 0x83, 0xfc, 0xe9, 0x7d, 0x13, 0xbd, 0x86, 0x3e, 0x25, 0x38, 0x6c, 0xc6, 0xa7, 0xe5,
	0x79, 0xae, 0x67, 0xaf, 0xa1, 0xdb, 0xbd, 0x06, 0xba, 0xbf, 0x03, 0x40, 0x5b, 0xab, 0x78, 0x79,
	0x04, 0x4d, 0xa2, 0x4c, 0xa4, 0xf8, 0x97, 0x49, 0xc2, 0xf5, 0x3c, 0xf6, 0x08, 0x9a, 0x27, 0x62,
	0xfa, 0x52, 0xa4, 0xde, 0x4d, 0x70, 0x8f, 0x43, 0xd2, 0xa0, 0xc3, 0xdd, 0xe3, 0x90, 0xc2, 0x64,
	0xf1, 0xf2, 0x99, 0x58, 0xea, 0xc8, 0xd7, 0x14, 0xfb, 0x8f, 0x0b, 0x6d, 0xf2, 0xee, 0xd5, 0x38,
	0x1e, 0x06, 0x98, 0x26, 0x74, 0x1e, 0xd6, 0x14, 0xa6, 0xcf, 0x61, 0x2a, 0x68, 0x35, 0xe5, 0xe2,
	0x0e, 0xcf, 0x69, 0xf4, 0xce, 0x07, 0x8b, 0xec, 0x2c, 0x49, 0xa3, 0x6c, 0x49, 0x58, 0xae, 0xf3,
	0x82, 0x81, 0xa7, 0x3c, 0x0f, 0xa6, 0x0a, 0xc7, 0x2d, 0x4e, 0xdf, 0xb8, 0xa2, 0x2f, 0x26, 0x51,
	0x4c, 0x48, 0x6d, 0x12, 0x52, 0x0b, 0x06, 0xe2, 0x5f, 0x69, 0xc6, 0x93, 0x24, 0x23, 0x20, 0x77,
	0xb8, 0xc5, 0xf1, 0x18, 0x74, 0x0e, 0x53, 0x11, 0x64, 0x42, 0x47, 0xdc, 0x2e, 0x1d, 0x59, 0xe2,
	0x29, 0xc4, 0x05, 0xe1, 0x52, 0x4f, 0x69, 0xd1, 0x14, 0x9b, 0x85, 0xa7, 0x7c, 0x3f, 0x49, 0xcf,
	0xf5, 0x04, 0xa0, 0x09, 0x16, 0x07, 0x53, 0xfc, 0x51, 0x24, 0xa7, 0x91, 0x94, 0x7a, 0x4a, 0x9b,
	0xa6, 0x94, 0x99, 0x14, 0xc5, 0xaf, 0x32, 0x11, 0x87, 0x92, 0x20, 0xdf, 0xe2, 0x86, 0x64, 0x7f,
	0x75, 0xa0, 0xa1, 0xec, 0x53, 0x05, 0x65, 0x96, 0x5f, 0x72, 0x94, 0x29, 0xbf, 0x2a, 0x3f, 0x94,
	0xfd, 0x5a, 0xd3, 0xbe, 0x21, 0xaa, 0x1c, 0xa9, 0xf5, 0xd5, 0x48, 0xf5, 0xb1, 0x9a, 0xa3, 0xed,
	0xa4, 0xdf, 0xa0, 0xac, 0x69, 0x48, 0xb4, 0x91, 0x3e, 0x96, 0xf4, 0x53, 0xb9, 0xc4, 0x66, 0xb1,
	0xf7, 0xa1, 0xa5, 0xd2, 0x41, 0xfc, 0x71, 0x82, 0x10, 0x25, 0xe2, 0x2a, 0x88, 0xd2, 0x04, 0xae,
	0xe7, 0x21, 0xc4, 0xe9, 0x2b, 0x87, 0xf8, 0x96, 0xeb, 0xdf, 0x86, 0x8e, 0xce, 0x46, 0x6a, 0x07,
	0xac, 0xe1, 0x8a, 0x36, 0x15, 0x20, 0xa7, 0xd9, 0xcf, 0x1d, 0xd8, 0x53, 0xab, 0x55, 0xb6, 0x27,
	0x91, 0x1f, 0xc2, 0x2d, 0x5d, 0xf5, 0x46, 0xc9, 0xcc, 0xe4, 0x39, 0x15, 0x28, 0xeb, 0x03, 0xde,
	0x13, 0x2c, 0xea, 0x91, 0xcc, 0xf2, 0x33, 0xd0, 0xf4, 0xed, 0x77, 0xde, 0xba, 0x4c, 0x4e, 0x2d,
	0x16, 0x2f, 0xaf, 0x62, 0x5d, 0x68, 0xea, 0x62, 0x7c, 0x07, 0x9a, 0x67, 0x76, 0xbd, 0xd6, 0x14,
	0x7b, 0x0c, 0x6d, 0x95, 0xb1, 0x63, 0x92, 0x32, 0xcf, 0xe7, 0xb1, 0xae, 0x4a, 0x86, 0x2c, 0x55,
	0x15, 0xb7, 0xa8, 0x2a, 0xec, 0x8f, 0x0e, 0x74, 0x28, 0x3b, 0xe2, 0x7a, 0x5d, 0x19, 0x4b, 0x75,
	0xcd, 0x94, 0x9f, 0x01, 0x74, 0x46, 0xe5, 0x44, 0x85, 0x1a, 0x7d, 0xf9, 0xea, 0x44, 0xa5, 0xb4,
	0x2a, 0x2d, 0xa4, 0x18, 0x0f, 0xc3, 0x54, 0x48, 0x29, 0xa4, 0x5f, 0x23, 0x6d, 0x0a, 0x06, 0xc5,
	0x73, 0xde, 0x6e, 0xd4, 0xc9, 0xbe, 0x05, 0x83, 0x7d, 0xe6, 0xe8, 0xe4, 0x4e, 0xda, 0x5e, 0x26,
	0x6a, 0xa9, 0x01, 0x71, 0xb7, 0x69, 0x40, 0xca, 0xc7, 0xd7, 0x56, 0x8e, 0x47, 0x10, 0x0c, 0xd3,
	0x44, 0xe5, 0x5a, 0x94, 0x82, 0xb2, 0x8a, 0x12, 0x72, 0x7d, 0x80, 0x3d, 0x82, 0x5d, 0xb3, 0xb1,
	0xb7, 0x07, 0x35, 0x8c, 0x36, 0x05, 0x18, 0xfc, 0xcc, 0x3b, 0x57, 0x95, 0x58, 0xe9, 0x9b, 0xfd,
	0x04, 0x76, 0x31, 0xda, 0xa8, 0x14, 0xdd, 0x83, 0x5d, 0xfc, 0xd5, 0x69, 0x95, 0xd2, 0xa4, 0xa1,
	0xcd, 0x18, 0x75, 0x7f, 0x6e, 0x31, 0x86, 0x34, 0x26, 0x23, 0xfc, 0x55, 0x91, 0xa9, 0x55, 0xb0,
	0x38, 0xde, 0x7d, 0xd8, 0x79, 0x21, 0x52, 0x19, 0x25, 0xb1, 0x6a, 0x16, 0xde, 0x75, 0x1e, 0x71,
	0xc3, 0x61, 0x73, 0xb8, 0x7b, 0x98, 0xc4, 0x52, 0xc4, 0x72, 0x21, 0x75, 0xb8, 0x46, 0xd9, 0xe9,
	0x62, 0x3a, 0x0d, 0xd2, 0xe5, 0xb5, 0x93, 0xcf, 0x4a, 0x97, 0xef, 0x96, 0x92, 0x0a, 0x7b, 0x17,
	0x40, 0x25, 0x1f, 0x72, 0x29, 0x26, 0xaa, 0xa3, 0xbc, 0x00, 0x1d, 0xe1, 0xda, 0xe1, 0xe2, 0xe5,
	0x45, 0x34, 0x2e, 0x6a, 0x50, 0xc1, 0x60, 0x3f, 0x82, 0x3b, 0xeb, 0xe2, 0xd2, 0x3e, 0xef, 0x81,
	0x3b, 0x38, 0xd6, 0x72, 0x3e, 0xdc, 0x20, 0xe7, 0xa5, 0x5a, 0x72, 0x77, 0x70, 0x8c, 0xbe, 0x39,
	0x11, 0x53, 0x85, 0x9d, 0x0e, 0xa7, 0x6f, 0xf6, 0x0b, 0x07, 0xfc, 0xf2, 0x2a, 0x1e, 0x7c, 0x6a,
	0x3a, 0xeb, 0xc7, 0xd0, 0x18, 0xe0, 0xb9, 0xfa, 0xc4, 0xaf, 0x56, 0x3a, 0x91, 0x22, 0x4e, 0xad,
	0xf3, 0xbe, 0x0e, 0x75, 0x89, 0xde, 0xac, 0xd1, 0xfa, 0x4d, 0x68, 0x35, 0xc0, 0xe0, 0x34, 0x91,
	0xbd, 0x07, 0x70, 0x7a, 0x16, 0xa4, 0x82, 0xfa, 0x56, 0x8c, 0x84, 0x53, 0x31, 0x3e, 0xcf, 0x11,
	0xa6, 0x29, 0x9d, 0xe7, 0xcf, 0x4b, 0xf5, 0xfb, 0x5c, 0x2c, 0xd9, 0x3f, 0x1c, 0xb8, 0x97, 0x0b,
	0x54, 0xec, 0x63, 0xd4, 0xb9, 0x0d, 0x8d, 0x81, 0x05, 0x3c, 0x45, 0x10, 0x62, 0x85, 0xcc, 0x72,
	0xc4, 0x62, 0x23, 0xfc, 0xbe, 0x2d, 0x86, 0x96, 0xfe, 0xc1, 0x26, 0xe9, 0xf3, 0x49, 0x7c, 0x45,
	0xee, 0x13, 0x31, 0xc5, 0x76, 0xbb, 0x4e, 0x8d, 0xb2, 0xa6, 0xd0, 0x1c, 0x04, 0xee, 0x46, 0x05,
	0x73, 0xd0, 0xbd, 0xe7, 0xcf, 0x25, 0x85, 0xa2, 0x49, 0xac, 0x30, 0x75, 0xb5, 0x42, 0x79, 0xc7,
	0x7a, 0xa4, 0x75, 0x32, 0x24, 0xd9, 0x13, 0x37, 0x79, 0xa6, 0x03, 0x48, 0x53, 0x97, 0xca, 0xfb,
	0xad, 0x22, 0x70, 0xab, 0xc8, 0x9c, 0x4f, 0x66, 0x29, 0x3c, 0x58, 0x15, 0xfb, 0x5c, 0x2c, 0xb9,
	0x98, 0x1b, 0xc9, 0x2d, 0x19, 0x9d, 0xb2, 0x8c, 0xf6, 0x99, 0xee, 0x36, 0x67, 0xfe, 0x10, 0x3c,
	0x4c, 0x52, 0xd1, 0x58, 0x55, 0x54, 0x1d, 0xdd, 0x97, 0x1f, 0x64, 0x46, 0x86, 0xcf, 0x4a, 0x66,
	0x1a, 0x3e, 0x2b, 0xcc, 0x5a, 0xb3, 0xcc, 0xca, 0x7e, 0xe9, 0xc2, 0xfd, 0x75, 0xb4, 0x8b, 0xf0,
	0xba, 0xce, 0xb0, 0xce, 0xaf, 0x95, 0xcf, 0x5f, 0x6d, 0xdf, 0xea, 0x54, 0x06, 0xca, 0xed, 0x1b,
	0x5e, 0x81, 0xa8, 0xf1, 0xcc, 0x01, 0x85, 0x57, 0xa0, 0x9c, 0xa3, 0x9b, 0x9a, 0x93, 0x40, 0x9e,
	0xeb, 0xcb, 0xbc, 0x21, 0x2d, 0x67, 0xef, 0x6c, 0x04, 0xe7, 0x6e, 0x55, 0x70, 0xfe, 0xc5, 0x81,
	0x37, 0x72, 0x83, 0xe8, 0x66, 0x61, 0xa3, 0x7f, 0x9d, 0x15, 0xb5, 0xcd, 0x7d, 0x4f, 0x1b, 0xc4,
	0xba, 0xef, 0x0d, 0x53, 0x41, 0x1d, 0x6f, 0x2d, 0x1f, 0xa1, 0x7e, 0xb7, 0x9b, 0x5f, 0x2f, 0x2d,
	0x7b, 0xd8, 0xac, 0x5c, 0xf8, 0x66, 0x55, 0xe1, 0xff, 0xe4, 0xc0, 0xed, 0x42, 0xf8, 0xa0, 0x78,
	0x4d, 0x38, 0x00, 0xb7, 0x7f, 0x56, 0xf1, 0xb6, 0xe3, 0xf6, 0x57, 0x1c, 0x5c, 0xd2, 0xd4, 0xc8,
	0x54, 0xab, 0x28, 0x13, 0x55, 0x05, 0xbc, 0xc4, 0xda, 0x4d, 0x42, 0xce, 0xc0, 0xfe, 0xad, 0x28,
	0x0b, 0x2f, 0x44, 0x1a, 0x7d, 0x9c, 0xe7, 0x81, 0x52, 0x79, 0x77, 0x56, 0xcb, 0xfb, 0x3e, 0x80,
	0xba, 0xef, 0x59, 0x85, 0xd5, 0xe2, 0x6c, 0x2d, 0x27, 0x1b, 0xc0, 0x97, 0x72, 0x41, 0xe8, 0x98,
	0xc2, 0x76, 0xea, 0xda, 0xa8, 0xcd, 0x77, 0xf9, 0x15, 0x4d, 0x4d, 0x63, 0xbf, 0x72, 0x60, 0xbf,
	0x70, 0x02, 0xc1, 0xfb, 0x73, 0x2b, 0x41, 0x6e, 0xd5, 0x12, 0x74, 0x06, 0x6f, 0x6d, 0x92, 0x49,
	0xf5, 0x1a, 0x57, 0x85, 0xfa, 0xd6, 0x27, 0x7d, 0xe6, 0x40, 0x93, 0xe3, 0x60, 0xa8, 0xde, 0x05,
	0xac, 0x2d, 0x35, 0x85, 0x9e, 0x55, 0x4f, 0x77, 0xaa, 0xdb, 0xae, 0xf5, 0x1a, 0xbc, 0x60, 0xfc,
	0x8f, 0xb6, 0xce, 0x7a, 0xb9, 0xa8, 0xdb, 0xa9, 0x27, 0xcc, 0x9f, 0xd8, 0x1a, 0xc5, 0x13, 0x1b,
	0xa2, 0x84, 0x9a, 0x6a, 0xf5, 0xa6, 0xd2, 0xa4, 0x10, 0xb3, 0x38, 0xec, 0xf7, 0x0e, 0x3c, 0xc0,
	0x38, 0x51, 0x02, 0x53, 0xeb, 0x8b, 0xeb, 0xac, 0x9c, 0x6e, 0x70, 0xe4, 0x54, 0xc5, 0xfb, 0x37,
	0x8c, 0xfa, 0xda, 0x64, 0x77, 0x37, 0x2c, 0x51, 0x13, 0xb8, 0xb1, 0x13, 0x83, 0x0e, 0x2e, 0x15,
	0xa1, 0x7e, 0xe6, 0x52, 0x8d, 0x76, 0x89, 0xc7, 0x7e, 0x86, 0x45, 0x73, 0x5d, 0xd2, 0x6b, 0x8b,
	0xa9, 0xde, 0xbd, 0xec, 0x8c, 0xa5, 0xc9, 0xab, 0xed, 0xcf, 0x3e, 0x82, 0xce, 0x28, 0x99, 0x11,
	0xad, 0x9b, 0xb7, 0xd6, 0x28, 0x99, 0x6d, 0xf5, 0x9c, 0x52, 0x2c, 0x60, 0x47, 0xb0, 0xa7, 0x62,
	0x47, 0xc8, 0x19, 0xc2, 0xf3, 0x44, 0x4e, 0xae, 0xf1, 0x26, 0xf2, 0x07, 0x07, 0xbc, 0xe2, 0xc9,
	0x50, 0x05, 0xaf, 0x9c, 0xfc, 0x7f, 0xa2, 0x59, 0x62, 0xb8, 0xd5, 0xc4, 0x40, 0x37, 0x3e, 0x8d,
	0xe2, 0xf0, 0x83, 0x78, 0x2c, 0xe8, 0xc9, 0x0d, 0x6d, 0xb7, 0xcb, 0x4b, 0x3c, 0xf6, 0x3b, 0xcc,
	0x77, 0x45, 0xfc, 0x0d, 0xa3, 0x78, 0x62, 0x5c, 0xd8, 0x85, 0xf6, 0xd3, 0x34, 0x99, 0x96, 0x0b,
	0xbb, 0xcd, 0x52, 0x0f, 0xa1, 0xf1, 0x44, 0x57, 0xdd, 0x16, 0xd7, 0x14, 0xa2, 0xbc, 0x1f, 0x48,
	0x53, 0x58, 0xd5, 0x9b, 0xb9, 0xc5, 0xc9, 0xc1, 0x51, 0xaf, 0x9a, 0x0b, 0xe7, 0x65, 0x21, 0x93,
	0x42, 0xc8, 0x42, 0x04, 0xa7, 0x24, 0xc2, 0x4d, 0x70, 0x47, 0x52, 0x23, 0xc9, 0x1d, 0xc9, 0xed,
	0xd3, 0xef, 0x0f, 0xe0, 0x36, 0x17, 0xf3, 0xaa, 0xed, 0xad, 0xd9, 0xde, 0xad, 0xba, 0xfd, 0x6f,
	0x1d, 0xb8, 0x6b, 0x40, 0x56, 0xf5, 0x90, 0x72, 0xbf, 0xec, 0x6e, 0xdb, 0x2f, 0x6f, 0x6d, 0x82,
	0xaf, 0xc1, 0x1b, 0x5c, 0xcc, 0x87, 0x69, 0x32, 0x4b, 0x64, 0x70, 0x51, 0xaa, 0x41, 0xc5, 0x9b,
	0x5d, 0xfe, 0x57, 0x05, 0xfb, 0x04, 0xde, 0x34, 0x1a, 0x55, 0x5d, 0xe3, 0xf5, 0xd7, 0x1e, 0x06,
	0x2a, 0xbd, 0x60, 0xda, 0x6b, 0xfa, 0x7b, 0x7f, 0x7b, 0xbd, 0xef, 0xfc, 0xf3, 0xf5, 0xbe, 0xf3,
	0xaf, 0xd7, 0xfb, 0xce, 0xaf, 0xff, 0xbd, 0xff, 0x85, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x93,
	0x7d, 0x79, 0xc5, 0x58, 0x1a, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Code))
	}
	if m.Signature != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Body != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Nonce == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Nonce))
	}
	if m.Target != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.GasLimit == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GasLimit)))
		i += copy(dAtA[i:], m.GasLimit)
	}
	if m.GasPrice == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GasPrice)))
		i += copy(dAtA[i:], m.GasPrice)
	}
	if m.Hash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.ExtraData != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ExtraData)))
		i += copy(dAtA[i:], m.ExtraData)
	}
	if m.ExtraDataType != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.ExtraDataType))
	}
	if m.Type == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Type))
	}
	if m.Sign != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransactionRequestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionRequestMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionHashes) > 0 {
		for _, b := range m.TransactionHashes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.CurrentBlockHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.CurrentBlockHash)))
		i += copy(dAtA[i:], m.CurrentBlockHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrieNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrieNodes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TrieNodes) > 0 {
		for _, msg := range m.TrieNodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransactionSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainPieceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainPieceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pieces) > 0 {
		for _, b := range m.Pieces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ReqCnt != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.ReqCnt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqHeight == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.ReqHeight))
	}
	if m.ReqSize == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.ReqSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Height != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Height))
	}
	if m.PreHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.PreHash)))
		i += copy(dAtA[i:], m.PreHash)
	}
	if m.Elapsed != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Elapsed))
	}
	if m.ProveValue != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ProveValue)))
		i += copy(dAtA[i:], m.ProveValue)
	}
	if m.TotalQN != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.TotalQN))
	}
	if m.CurTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.CurTime))
	}
	if m.Castor != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Castor)))
		i += copy(dAtA[i:], m.Castor)
	}
	if m.GroupId != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if m.Signature != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Nonce != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Nonce))
	}
	if m.TxTree != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.TxTree)))
		i += copy(dAtA[i:], m.TxTree)
	}
	if m.ReceiptTree != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ReceiptTree)))
		i += copy(dAtA[i:], m.ReceiptTree)
	}
	if m.StateTree != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.StateTree)))
		i += copy(dAtA[i:], m.StateTree)
	}
	if m.ExtraData != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ExtraData)))
		i += copy(dAtA[i:], m.ExtraData)
	}
	if m.Random != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Random)))
		i += copy(dAtA[i:], m.Random)
	}
	if m.GasFee != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.GasFee))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.PubKey == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Parent != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if m.PreGroup == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.PreGroup)))
		i += copy(dAtA[i:], m.PreGroup)
	}
	if m.Authority != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Authority))
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.BeginTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.BeginTime))
	}
	if m.MemberRoot != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.MemberRoot)))
		i += copy(dAtA[i:], m.MemberRoot)
	}
	if m.CreateHeight != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.CreateHeight))
	}
	if m.ReadyHeight != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.ReadyHeight))
	}
	if m.WorkHeight != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.WorkHeight))
	}
	if m.DismissHeight != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.DismissHeight))
	}
	if m.Extends != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(*m.Extends)))
		i += copy(dAtA[i:], *m.Extends)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Id != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.PubKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	if m.Signature != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.Members) > 0 {
		for _, b := range m.Members {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.GroupHeight != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.GroupHeight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupIdSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupIdSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		for _, b := range m.GroupIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupRequestInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupRequestInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentTopGroupId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.CurrentTopGroupId)))
		i += copy(dAtA[i:], m.CurrentTopGroupId)
	}
	if m.ExistGroupIds != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.ExistGroupIds.Size()))
		n3, err := m.ExistGroupIds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Hashes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hashes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TotalQnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalQnInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalQn == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.TotalQn))
	}
	if m.Height == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Height))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StateInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Height))
	}
	if m.Transactions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Transactions.Size()))
		n4, err := m.Transactions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.BlockHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Height))
	}
	if len(m.TrieNodes) > 0 {
		for _, msg := range m.TrieNodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BlockHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if m.ProBlockStateRoot == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ProBlockStateRoot)))
		i += copy(dAtA[i:], m.ProBlockStateRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrieNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrieNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Data == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.DataHash)))
		i += copy(dAtA[i:], m.DataHash)
	}
	if m.DataSign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.DataSign)))
		i += copy(dAtA[i:], m.DataSign)
	}
	if m.SignMember == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.SignMember)))
		i += copy(dAtA[i:], m.SignMember)
	}
	if m.Version != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusGroupInitSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusGroupInitSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Signature == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PubKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.PublicKey == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusGroupInitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusGroupInitInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GI == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.GI.Size()))
		n6, err := m.GI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Mems) > 0 {
		for _, b := range m.Mems {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusGroupRawMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusGroupRawMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GInfo == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.GInfo.Size()))
		n7, err := m.GInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n8, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SharePiece) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharePiece) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seckey == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Seckey)))
		i += copy(dAtA[i:], m.Seckey)
	}
	if m.Pubkey == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusSharePieceMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusSharePieceMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GHash)))
		i += copy(dAtA[i:], m.GHash)
	}
	if m.Dest == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Dest)))
		i += copy(dAtA[i:], m.Dest)
	}
	if m.SharePiece == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.SharePiece.Size()))
		n9, err := m.SharePiece.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.MemCnt == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.MemCnt))
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n10, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusSignPubKeyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusSignPubKeyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GHash)))
		i += copy(dAtA[i:], m.GHash)
	}
	if m.GroupID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.SignPK == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.SignPK)))
		i += copy(dAtA[i:], m.SignPK)
	}
	if m.MemCnt == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.MemCnt))
	}
	if m.SignData == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.SignData.Size()))
		n11, err := m.SignData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusSignPubkeyReqMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusSignPubkeyReqMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.SignData == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.SignData.Size()))
		n12, err := m.SignData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StaticGroupSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticGroupSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.GroupPK == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupPK)))
		i += copy(dAtA[i:], m.GroupPK)
	}
	if m.GHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GHash)))
		i += copy(dAtA[i:], m.GHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusGroupInitedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusGroupInitedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GHash)))
		i += copy(dAtA[i:], m.GHash)
	}
	if m.GroupID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.GroupPK == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupPK)))
		i += copy(dAtA[i:], m.GroupPK)
	}
	if m.CreateHeight == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.CreateHeight))
	}
	if m.ParentSign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ParentSign)))
		i += copy(dAtA[i:], m.ParentSign)
	}
	if m.MemMask == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.MemMask)))
		i += copy(dAtA[i:], m.MemMask)
	}
	if m.MemCnt == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.MemCnt))
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n13, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusCurrentMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCurrentMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.PreHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.PreHash)))
		i += copy(dAtA[i:], m.PreHash)
	}
	if m.PreTime == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.PreTime)))
		i += copy(dAtA[i:], m.PreTime)
	}
	if m.BlockHeight == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.BlockHeight))
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n14, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusCastMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCastMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bh == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Bh.Size()))
		n15, err := m.Bh.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.GroupID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n16, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.ProveHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ProveHash)))
		i += copy(dAtA[i:], m.ProveHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusVerifyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusVerifyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if m.RandomSign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.RandomSign)))
		i += copy(dAtA[i:], m.RandomSign)
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n17, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusBlockMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusBlockMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Block == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Block.Size()))
		n18, err := m.Block.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusCreateGroupRawMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCreateGroupRawMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GInfo == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.GInfo.Size()))
		n19, err := m.GInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n20, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConsensusCreateGroupSignMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCreateGroupSignMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GHash)))
		i += copy(dAtA[i:], m.GHash)
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n21, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.TxHash)))
		i += copy(dAtA[i:], m.TxHash)
	}
	if len(m.TargetIds) > 0 {
		for _, num := range m.TargetIds {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTas(dAtA, i, uint64(num))
		}
	}
	if m.BlockHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if m.GroupId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if m.Sign != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.TotalValue == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.TotalValue))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CastRewardTransSignReqMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastRewardTransSignReqMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n22, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Reward == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Reward.Size()))
		n23, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.SignedPieces) > 0 {
		for _, b := range m.SignedPieces {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTas(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CastRewardTransSignMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastRewardTransSignMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n24, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.ReqHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.ReqHash)))
		i += copy(dAtA[i:], m.ReqHash)
	}
	if m.BlockHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopBlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopBlockInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopHeader == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.TopHeader.Size()))
		n25, err := m.TopHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainPieceBlockMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainPieceBlockMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopHeader == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.TopHeader.Size()))
		n26, err := m.TopHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FindAncestor == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		if *m.FindAncestor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateGroupPingMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupPingMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromGroupID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.FromGroupID)))
		i += copy(dAtA[i:], m.FromGroupID)
	}
	if m.PingID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(*m.PingID)))
		i += copy(dAtA[i:], *m.PingID)
	}
	if m.BaseHeight == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTas(dAtA, i, uint64(*m.BaseHeight))
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n27, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateGroupPongMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupPongMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PingID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(*m.PingID)))
		i += copy(dAtA[i:], *m.PingID)
	}
	if m.Ts == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Ts)))
		i += copy(dAtA[i:], m.Ts)
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n28, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReqSharePieceMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSharePieceMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GHash)))
		i += copy(dAtA[i:], m.GHash)
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n29, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseSharePieceMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSharePieceMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GHash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.GHash)))
		i += copy(dAtA[i:], m.GHash)
	}
	if m.SharePiece == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.SharePiece.Size()))
		n30, err := m.SharePiece.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Sign == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTas(dAtA, i, uint64(m.Sign.Size()))
		n31, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReqProposalBlockMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqProposalBlockMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResponseProposalBlockMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseProposalBlockMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTas(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTas(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovTas(uint64(*m.Code))
	}
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Body != nil {
		l = len(m.Body)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Nonce != nil {
		n += 1 + sovTas(uint64(*m.Nonce))
	}
	if m.Target != nil {
		l = len(m.Target)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GasLimit != nil {
		l = len(m.GasLimit)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GasPrice != nil {
		l = len(m.GasPrice)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ExtraData != nil {
		l = len(m.ExtraData)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ExtraDataType != nil {
		n += 1 + sovTas(uint64(*m.ExtraDataType))
	}
	if m.Type != nil {
		n += 1 + sovTas(uint64(*m.Type))
	}
	if m.Sign != nil {
		l = len(m.Sign)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionRequestMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransactionHashes) > 0 {
		for _, b := range m.TransactionHashes {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.CurrentBlockHash != nil {
		l = len(m.CurrentBlockHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrieNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrieNodes) > 0 {
		for _, e := range m.TrieNodes {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainPieceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pieces) > 0 {
		for _, b := range m.Pieces {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.ReqCnt != nil {
		n += 1 + sovTas(uint64(*m.ReqCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqHeight != nil {
		n += 1 + sovTas(uint64(*m.ReqHeight))
	}
	if m.ReqSize != nil {
		n += 1 + sovTas(uint64(*m.ReqSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Height != nil {
		n += 1 + sovTas(uint64(*m.Height))
	}
	if m.PreHash != nil {
		l = len(m.PreHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Elapsed != nil {
		n += 1 + sovTas(uint64(*m.Elapsed))
	}
	if m.ProveValue != nil {
		l = len(m.ProveValue)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.TotalQN != nil {
		n += 1 + sovTas(uint64(*m.TotalQN))
	}
	if m.CurTime != nil {
		n += 1 + sovTas(uint64(*m.CurTime))
	}
	if m.Castor != nil {
		l = len(m.Castor)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GroupId != nil {
		l = len(m.GroupId)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Nonce != nil {
		n += 1 + sovTas(uint64(*m.Nonce))
	}
	if m.TxTree != nil {
		l = len(m.TxTree)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ReceiptTree != nil {
		l = len(m.ReceiptTree)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.StateTree != nil {
		l = len(m.StateTree)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ExtraData != nil {
		l = len(m.ExtraData)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Random != nil {
		l = len(m.Random)
		n += 2 + l + sovTas(uint64(l))
	}
	if m.GasFee != nil {
		n += 2 + sovTas(uint64(*m.GasFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.PubKey != nil {
		l = len(m.PubKey)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Parent != nil {
		l = len(m.Parent)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.PreGroup != nil {
		l = len(m.PreGroup)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Authority != nil {
		n += 1 + sovTas(uint64(*m.Authority))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.BeginTime != nil {
		n += 1 + sovTas(uint64(*m.BeginTime))
	}
	if m.MemberRoot != nil {
		l = len(m.MemberRoot)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.CreateHeight != nil {
		n += 1 + sovTas(uint64(*m.CreateHeight))
	}
	if m.ReadyHeight != nil {
		n += 1 + sovTas(uint64(*m.ReadyHeight))
	}
	if m.WorkHeight != nil {
		n += 1 + sovTas(uint64(*m.WorkHeight))
	}
	if m.DismissHeight != nil {
		n += 1 + sovTas(uint64(*m.DismissHeight))
	}
	if m.Extends != nil {
		l = len(*m.Extends)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.PubKey != nil {
		l = len(m.PubKey)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, b := range m.Members {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.GroupHeight != nil {
		n += 1 + sovTas(uint64(*m.GroupHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
>>>>>>> origin/develop
}

func (m *GroupIdSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		for _, b := range m.GroupIds {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupRequestInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentTopGroupId != nil {
		l = len(m.CurrentTopGroupId)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ExistGroupIds != nil {
		l = m.ExistGroupIds.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Hashes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TotalQnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalQn != nil {
		n += 1 + sovTas(uint64(*m.TotalQn))
	}
	if m.Height != nil {
		n += 1 + sovTas(uint64(*m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != nil {
		n += 1 + sovTas(uint64(*m.Height))
	}
	if m.Transactions != nil {
		l = m.Transactions.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.BlockHash != nil {
		l = len(m.BlockHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != nil {
		n += 1 + sovTas(uint64(*m.Height))
	}
	if len(m.TrieNodes) > 0 {
		for _, e := range m.TrieNodes {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.BlockHash != nil {
		l = len(m.BlockHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ProBlockStateRoot != nil {
		l = len(m.ProBlockStateRoot)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrieNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataHash != nil {
		l = len(m.DataHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.DataSign != nil {
		l = len(m.DataSign)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.SignMember != nil {
		l = len(m.SignMember)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovTas(uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusGroupInitSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PubKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = len(m.ID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.PublicKey != nil {
		l = len(m.PublicKey)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusGroupInitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GI != nil {
		l = m.GI.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.Mems) > 0 {
		for _, b := range m.Mems {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusGroupRawMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GInfo != nil {
		l = m.GInfo.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SharePiece) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seckey != nil {
		l = len(m.Seckey)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Pubkey != nil {
		l = len(m.Pubkey)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusSharePieceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GHash != nil {
		l = len(m.GHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Dest != nil {
		l = len(m.Dest)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.SharePiece != nil {
		l = m.SharePiece.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.MemCnt != nil {
		n += 1 + sovTas(uint64(*m.MemCnt))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusSignPubKeyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GHash != nil {
		l = len(m.GHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GroupID != nil {
		l = len(m.GroupID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.SignPK != nil {
		l = len(m.SignPK)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.MemCnt != nil {
		n += 1 + sovTas(uint64(*m.MemCnt))
	}
	if m.SignData != nil {
		l = m.SignData.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusSignPubkeyReqMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupID != nil {
		l = len(m.GroupID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.SignData != nil {
		l = m.SignData.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StaticGroupSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupID != nil {
		l = len(m.GroupID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GroupPK != nil {
		l = len(m.GroupPK)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GHash != nil {
		l = len(m.GHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusGroupInitedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GHash != nil {
		l = len(m.GHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GroupID != nil {
		l = len(m.GroupID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GroupPK != nil {
		l = len(m.GroupPK)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.CreateHeight != nil {
		n += 1 + sovTas(uint64(*m.CreateHeight))
	}
	if m.ParentSign != nil {
		l = len(m.ParentSign)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.MemMask != nil {
		l = len(m.MemMask)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.MemCnt != nil {
		n += 1 + sovTas(uint64(*m.MemCnt))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCurrentMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupID != nil {
		l = len(m.GroupID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.PreHash != nil {
		l = len(m.PreHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.PreTime != nil {
		l = len(m.PreTime)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.BlockHeight != nil {
		n += 1 + sovTas(uint64(*m.BlockHeight))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCastMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bh != nil {
		l = m.Bh.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GroupID != nil {
		l = len(m.GroupID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ProveHash != nil {
		l = len(m.ProveHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusVerifyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHash != nil {
		l = len(m.BlockHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.RandomSign != nil {
		l = len(m.RandomSign)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusBlockMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCreateGroupRawMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GInfo != nil {
		l = m.GInfo.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCreateGroupSignMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GHash != nil {
		l = len(m.GHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxHash != nil {
		l = len(m.TxHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.TargetIds) > 0 {
		for _, e := range m.TargetIds {
			n += 1 + sovTas(uint64(e))
		}
	}
	if m.BlockHash != nil {
		l = len(m.BlockHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.GroupId != nil {
		l = len(m.GroupId)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = len(m.Sign)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.TotalValue != nil {
		n += 1 + sovTas(uint64(*m.TotalValue))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CastRewardTransSignReqMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.SignedPieces) > 0 {
		for _, b := range m.SignedPieces {
			l = len(b)
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CastRewardTransSignMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.ReqHash != nil {
		l = len(m.ReqHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.BlockHash != nil {
		l = len(m.BlockHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopBlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopHeader != nil {
		l = m.TopHeader.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainPieceBlockMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopHeader != nil {
		l = m.TopHeader.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.FindAncestor != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGroupPingMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromGroupID != nil {
		l = len(m.FromGroupID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.PingID != nil {
		l = len(*m.PingID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.BaseHeight != nil {
		n += 1 + sovTas(uint64(*m.BaseHeight))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGroupPongMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingID != nil {
		l = len(*m.PingID)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Ts != nil {
		l = len(m.Ts)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqSharePieceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GHash != nil {
		l = len(m.GHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseSharePieceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GHash != nil {
		l = len(m.GHash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.SharePiece != nil {
		l = m.SharePiece.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqProposalBlockMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovTas(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseProposalBlockMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovTas(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTas(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTas(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTas(x uint64) (n int) {
	return sovTas(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nonce = &v
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = append(m.GasLimit[:0], dAtA[iNdEx:postIndex]...)
			if m.GasLimit == nil {
				m.GasLimit = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = append(m.GasPrice[:0], dAtA[iNdEx:postIndex]...)
			if m.GasPrice == nil {
				m.GasPrice = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraDataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExtraDataType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000010)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionRequestMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionRequestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionRequestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHashes = append(m.TransactionHashes, make([]byte, postIndex-iNdEx))
			copy(m.TransactionHashes[len(m.TransactionHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBlockHash = append(m.CurrentBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentBlockHash == nil {
				m.CurrentBlockHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrieNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrieNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrieNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrieNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrieNodes = append(m.TrieNodes, &TrieNode{})
			if err := m.TrieNodes[len(m.TrieNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainPieceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainPieceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainPieceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pieces", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pieces = append(m.Pieces, make([]byte, postIndex-iNdEx))
			copy(m.Pieces[len(m.Pieces)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqCnt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqHeight = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqSize = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreHash = append(m.PreHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreHash == nil {
				m.PreHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elapsed", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Elapsed = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProveValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProveValue = append(m.ProveValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ProveValue == nil {
				m.ProveValue = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalQN", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalQN = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Castor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Castor = append(m.Castor[:0], dAtA[iNdEx:postIndex]...)
			if m.Castor == nil {
				m.Castor = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = append(m.GroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupId == nil {
				m.GroupId = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nonce = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxTree", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxTree = append(m.TxTree[:0], dAtA[iNdEx:postIndex]...)
			if m.TxTree == nil {
				m.TxTree = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptTree", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptTree = append(m.ReceiptTree[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptTree == nil {
				m.ReceiptTree = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateTree", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateTree = append(m.StateTree[:0], dAtA[iNdEx:postIndex]...)
			if m.StateTree == nil {
				m.StateTree = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Random = append(m.Random[:0], dAtA[iNdEx:postIndex]...)
			if m.Random == nil {
				m.Random = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GasFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupHeader) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = append(m.Parent[:0], dAtA[iNdEx:postIndex]...)
			if m.Parent == nil {
				m.Parent = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreGroup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreGroup = append(m.PreGroup[:0], dAtA[iNdEx:postIndex]...)
			if m.PreGroup == nil {
				m.PreGroup = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Authority = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTime = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberRoot = append(m.MemberRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberRoot == nil {
				m.MemberRoot = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateHeight = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadyHeight = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkHeight = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DismissHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DismissHeight = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extends", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Extends = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &GroupHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, make([]byte, postIndex-iNdEx))
			copy(m.Members[len(m.Members)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupHeight = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupIdSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupIdSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupIdSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupIds = append(m.GroupIds, make([]byte, postIndex-iNdEx))
			copy(m.GroupIds[len(m.GroupIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupRequestInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupRequestInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupRequestInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTopGroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentTopGroupId = append(m.CurrentTopGroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentTopGroupId == nil {
				m.CurrentTopGroupId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistGroupIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExistGroupIds == nil {
				m.ExistGroupIds = &GroupIdSlice{}
			}
			if err := m.ExistGroupIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hashes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hashes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hashes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalQnInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalQnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalQnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalQn", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalQn = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateInfoReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transactions == nil {
				m.Transactions = &TransactionSlice{}
			}
			if err := m.Transactions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, make([]byte, postIndex-iNdEx))
			copy(m.Addresses[len(m.Addresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrieNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrieNodes = append(m.TrieNodes, &TrieNode{})
			if err := m.TrieNodes[len(m.TrieNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProBlockStateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProBlockStateRoot = append(m.ProBlockStateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ProBlockStateRoot == nil {
				m.ProBlockStateRoot = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrieNode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrieNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrieNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = append(m.DataHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DataHash == nil {
				m.DataHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSign = append(m.DataSign[:0], dAtA[iNdEx:postIndex]...)
			if m.DataSign == nil {
				m.DataSign = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignMember", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignMember = append(m.SignMember[:0], dAtA[iNdEx:postIndex]...)
			if m.SignMember == nil {
				m.SignMember = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusGroupInitSummary) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusGroupInitSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusGroupInitSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &GroupHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeyInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusGroupInitInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusGroupInitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusGroupInitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GI == nil {
				m.GI = &ConsensusGroupInitSummary{}
			}
			if err := m.GI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mems", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mems = append(m.Mems, make([]byte, postIndex-iNdEx))
			copy(m.Mems[len(m.Mems)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusGroupRawMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusGroupRawMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusGroupRawMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GInfo == nil {
				m.GInfo = &ConsensusGroupInitInfo{}
			}
			if err := m.GInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SharePiece) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharePiece: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharePiece: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seckey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seckey = append(m.Seckey[:0], dAtA[iNdEx:postIndex]...)
			if m.Seckey == nil {
				m.Seckey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusSharePieceMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusSharePieceMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusSharePieceMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHash = append(m.GHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GHash == nil {
				m.GHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dest = append(m.Dest[:0], dAtA[iNdEx:postIndex]...)
			if m.Dest == nil {
				m.Dest = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePiece", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SharePiece == nil {
				m.SharePiece = &SharePiece{}
			}
			if err := m.SharePiece.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemCnt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemCnt = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusSignPubKeyMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusSignPubKeyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusSignPubKeyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHash = append(m.GHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GHash == nil {
				m.GHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignPK = append(m.SignPK[:0], dAtA[iNdEx:postIndex]...)
			if m.SignPK == nil {
				m.SignPK = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemCnt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemCnt = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignData == nil {
				m.SignData = &SignData{}
			}
			if err := m.SignData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusSignPubkeyReqMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusSignPubkeyReqMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusSignPubkeyReqMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignData == nil {
				m.SignData = &SignData{}
			}
			if err := m.SignData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticGroupSummary) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticGroupSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticGroupSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHash = append(m.GHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GHash == nil {
				m.GHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusGroupInitedMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusGroupInitedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusGroupInitedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHash = append(m.GHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GHash == nil {
				m.GHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateHeight = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentSign = append(m.ParentSign[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentSign == nil {
				m.ParentSign = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemMask", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemMask = append(m.MemMask[:0], dAtA[iNdEx:postIndex]...)
			if m.MemMask == nil {
				m.MemMask = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemCnt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemCnt = &v
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCurrentMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusCurrentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusCurrentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreHash = append(m.PreHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreHash == nil {
				m.PreHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreTime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreTime = append(m.PreTime[:0], dAtA[iNdEx:postIndex]...)
			if m.PreTime == nil {
				m.PreTime = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockHeight = &v
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCastMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusCastMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusCastMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bh == nil {
				m.Bh = &BlockHeader{}
			}
			if err := m.Bh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProveHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProveHash = append(m.ProveHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ProveHash == nil {
				m.ProveHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusVerifyMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusVerifyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusVerifyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomSign = append(m.RandomSign[:0], dAtA[iNdEx:postIndex]...)
			if m.RandomSign == nil {
				m.RandomSign = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusBlockMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusBlockMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusBlockMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCreateGroupRawMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusCreateGroupRawMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusCreateGroupRawMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GInfo == nil {
				m.GInfo = &ConsensusGroupInitInfo{}
			}
			if err := m.GInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCreateGroupSignMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusCreateGroupSignMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusCreateGroupSignMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHash = append(m.GHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GHash == nil {
				m.GHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TargetIds = append(m.TargetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTas
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TargetIds) == 0 {
					m.TargetIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TargetIds = append(m.TargetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = append(m.GroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupId == nil {
				m.GroupId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalValue = &v
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CastRewardTransSignReqMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastRewardTransSignReqMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastRewardTransSignReqMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedPieces", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedPieces = append(m.SignedPieces, make([]byte, postIndex-iNdEx))
			copy(m.SignedPieces[len(m.SignedPieces)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CastRewardTransSignMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastRewardTransSignMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastRewardTransSignMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqHash = append(m.ReqHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqHash == nil {
				m.ReqHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopBlockInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopBlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopBlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopHeader == nil {
				m.TopHeader = &BlockHeader{}
			}
			if err := m.TopHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainPieceBlockMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainPieceBlockMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainPieceBlockMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopHeader == nil {
				m.TopHeader = &BlockHeader{}
			}
			if err := m.TopHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindAncestor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FindAncestor = &b
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupPingMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupPingMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupPingMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromGroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromGroupID = append(m.FromGroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.FromGroupID == nil {
				m.FromGroupID = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PingID = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BaseHeight = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupPongMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupPongMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupPongMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PingID = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ts = append(m.Ts[:0], dAtA[iNdEx:postIndex]...)
			if m.Ts == nil {
				m.Ts = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSharePieceMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSharePieceMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSharePieceMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHash = append(m.GHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GHash == nil {
				m.GHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSharePieceMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSharePieceMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSharePieceMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHash = append(m.GHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GHash == nil {
				m.GHash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePiece", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SharePiece == nil {
				m.SharePiece = &SharePiece{}
			}
			if err := m.SharePiece.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignData{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqProposalBlockMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqProposalBlockMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqProposalBlockMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseProposalBlockMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseProposalBlockMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseProposalBlockMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTas(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTas
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTas
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTas
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTas(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTas = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTas   = fmt.Errorf("proto: integer overflow")
)
