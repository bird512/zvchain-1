// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p.proto

package network

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MessageNone      MessageType = 0
	MessageType_MessagePing      MessageType = 1
	MessageType_MessagePong      MessageType = 2
	MessageType_MessageFindnode  MessageType = 3
	MessageType_MessageNeighbors MessageType = 4
	MessageType_MessageData      MessageType = 5
)

var MessageType_name = map[int32]string{
	0: "MessageNone",
	1: "MessagePing",
	2: "MessagePong",
	3: "MessageFindnode",
	4: "MessageNeighbors",
	5: "MessageData",
}

var MessageType_value = map[string]int32{
	"MessageNone":      0,
	"MessagePing":      1,
	"MessagePong":      2,
	"MessageFindnode":  3,
	"MessageNeighbors": 4,
	"MessageData":      5,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{0}
}

type DataType int32

const (
	DataType_DataNormal       DataType = 0
	DataType_DataGlobal       DataType = 1
	DataType_DataGlobalRandom DataType = 2
	DataType_DataGroup        DataType = 3
	DataType_DataGroupColumn  DataType = 4
	DataType_DataGroupSlice   DataType = 5
)

var DataType_name = map[int32]string{
	0: "DataNormal",
	1: "DataGlobal",
	2: "DataGlobalRandom",
	3: "DataGroup",
	4: "DataGroupColumn",
	5: "DataGroupSlice",
}

var DataType_value = map[string]int32{
	"DataNormal":       0,
	"DataGlobal":       1,
	"DataGlobalRandom": 2,
	"DataGroup":        3,
	"DataGroupColumn":  4,
	"DataGroupSlice":   5,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{1}
}

type RpcNode struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	ID                   string   `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcNode) Reset()         { *m = RpcNode{} }
func (m *RpcNode) String() string { return proto.CompactTextString(m) }
func (*RpcNode) ProtoMessage()    {}
func (*RpcNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{0}
}
func (m *RpcNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcNode.Merge(m, src)
}
func (m *RpcNode) XXX_Size() int {
	return m.Size()
}
func (m *RpcNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcNode.DiscardUnknown(m)
}

var xxx_messageInfo_RpcNode proto.InternalMessageInfo

func (m *RpcNode) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *RpcNode) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RpcNode) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type RpcEndPoint struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcEndPoint) Reset()         { *m = RpcEndPoint{} }
func (m *RpcEndPoint) String() string { return proto.CompactTextString(m) }
func (*RpcEndPoint) ProtoMessage()    {}
func (*RpcEndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{1}
}
func (m *RpcEndPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcEndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcEndPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcEndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcEndPoint.Merge(m, src)
}
func (m *RpcEndPoint) XXX_Size() int {
	return m.Size()
}
func (m *RpcEndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcEndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_RpcEndPoint proto.InternalMessageInfo

func (m *RpcEndPoint) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *RpcEndPoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type MsgPing struct {
	Version              int32        `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	From                 *RpcEndPoint `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To                   *RpcEndPoint `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	ChainID              uint32       `protobuf:"varint,4,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Expiration           uint64       `protobuf:"varint,5,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	PK                   []byte       `protobuf:"bytes,6,opt,name=PK,proto3" json:"PK,omitempty"`
	Sign                 []byte       `protobuf:"bytes,7,opt,name=Sign,proto3" json:"Sign,omitempty"`
	CurTime              uint64       `protobuf:"varint,8,opt,name=CurTime,proto3" json:"CurTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MsgPing) Reset()         { *m = MsgPing{} }
func (m *MsgPing) String() string { return proto.CompactTextString(m) }
func (*MsgPing) ProtoMessage()    {}
func (*MsgPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{2}
}
func (m *MsgPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPing.Merge(m, src)
}
func (m *MsgPing) XXX_Size() int {
	return m.Size()
}
func (m *MsgPing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPing proto.InternalMessageInfo

func (m *MsgPing) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MsgPing) GetFrom() *RpcEndPoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MsgPing) GetTo() *RpcEndPoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MsgPing) GetChainID() uint32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *MsgPing) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *MsgPing) GetPK() []byte {
	if m != nil {
		return m.PK
	}
	return nil
}

func (m *MsgPing) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *MsgPing) GetCurTime() uint64 {
	if m != nil {
		return m.CurTime
	}
	return 0
}

type MsgPong struct {
	Version              int32    `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	VerifyResult         bool     `protobuf:"varint,2,opt,name=VerifyResult,proto3" json:"VerifyResult,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgPong) Reset()         { *m = MsgPong{} }
func (m *MsgPong) String() string { return proto.CompactTextString(m) }
func (*MsgPong) ProtoMessage()    {}
func (*MsgPong) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{3}
}
func (m *MsgPong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPong.Merge(m, src)
}
func (m *MsgPong) XXX_Size() int {
	return m.Size()
}
func (m *MsgPong) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPong.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPong proto.InternalMessageInfo

func (m *MsgPong) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MsgPong) GetVerifyResult() bool {
	if m != nil {
		return m.VerifyResult
	}
	return false
}

type MsgFindNode struct {
	Target               []byte   `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	Expiration           uint64   `protobuf:"varint,2,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgFindNode) Reset()         { *m = MsgFindNode{} }
func (m *MsgFindNode) String() string { return proto.CompactTextString(m) }
func (*MsgFindNode) ProtoMessage()    {}
func (*MsgFindNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{4}
}
func (m *MsgFindNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFindNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFindNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFindNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFindNode.Merge(m, src)
}
func (m *MsgFindNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgFindNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFindNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFindNode proto.InternalMessageInfo

func (m *MsgFindNode) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *MsgFindNode) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MsgNeighbors struct {
	Nodes                []*RpcNode `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	Expiration           uint64     `protobuf:"varint,2,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MsgNeighbors) Reset()         { *m = MsgNeighbors{} }
func (m *MsgNeighbors) String() string { return proto.CompactTextString(m) }
func (*MsgNeighbors) ProtoMessage()    {}
func (*MsgNeighbors) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{5}
}
func (m *MsgNeighbors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNeighbors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNeighbors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNeighbors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNeighbors.Merge(m, src)
}
func (m *MsgNeighbors) XXX_Size() int {
	return m.Size()
}
func (m *MsgNeighbors) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNeighbors.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNeighbors proto.InternalMessageInfo

func (m *MsgNeighbors) GetNodes() []*RpcNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *MsgNeighbors) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MsgData struct {
	DataType             DataType `protobuf:"varint,1,opt,name=DataType,proto3,enum=network.DataType" json:"DataType,omitempty"`
	GroupID              string   `protobuf:"bytes,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Expiration           uint64   `protobuf:"varint,3,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	MessageID            uint64   `protobuf:"varint,4,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	BizMessageID         []byte   `protobuf:"bytes,5,opt,name=BizMessageID,proto3" json:"BizMessageID,omitempty"`
	SrcNodeID            []byte   `protobuf:"bytes,6,opt,name=SrcNodeID,proto3" json:"SrcNodeID,omitempty"`
	Data                 []byte   `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	RelayCount           int32    `protobuf:"varint,8,opt,name=RelayCount,proto3" json:"RelayCount,omitempty"`
	MessageCode          uint32   `protobuf:"varint,9,opt,name=MessageCode,proto3" json:"MessageCode,omitempty"`
	MessageInfo          uint32   `protobuf:"varint,10,opt,name=MessageInfo,proto3" json:"MessageInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgData) Reset()         { *m = MsgData{} }
func (m *MsgData) String() string { return proto.CompactTextString(m) }
func (*MsgData) ProtoMessage()    {}
func (*MsgData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{6}
}
func (m *MsgData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgData.Merge(m, src)
}
func (m *MsgData) XXX_Size() int {
	return m.Size()
}
func (m *MsgData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgData proto.InternalMessageInfo

func (m *MsgData) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_DataNormal
}

func (m *MsgData) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *MsgData) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *MsgData) GetMessageID() uint64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *MsgData) GetBizMessageID() []byte {
	if m != nil {
		return m.BizMessageID
	}
	return nil
}

func (m *MsgData) GetSrcNodeID() []byte {
	if m != nil {
		return m.SrcNodeID
	}
	return nil
}

func (m *MsgData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgData) GetRelayCount() int32 {
	if m != nil {
		return m.RelayCount
	}
	return 0
}

func (m *MsgData) GetMessageCode() uint32 {
	if m != nil {
		return m.MessageCode
	}
	return 0
}

func (m *MsgData) GetMessageInfo() uint32 {
	if m != nil {
		return m.MessageInfo
	}
	return 0
}

func init() {
	proto.RegisterEnum("network.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("network.DataType", DataType_name, DataType_value)
	proto.RegisterType((*RpcNode)(nil), "network.RpcNode")
	proto.RegisterType((*RpcEndPoint)(nil), "network.RpcEndPoint")
	proto.RegisterType((*MsgPing)(nil), "network.MsgPing")
	proto.RegisterType((*MsgPong)(nil), "network.MsgPong")
	proto.RegisterType((*MsgFindNode)(nil), "network.MsgFindNode")
	proto.RegisterType((*MsgNeighbors)(nil), "network.MsgNeighbors")
	proto.RegisterType((*MsgData)(nil), "network.MsgData")
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptor_e7fdddb109e6467a) }

var fileDescriptor_e7fdddb109e6467a = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdf, 0x6a, 0xdb, 0x3e,
	0x18, 0xad, 0x1c, 0xbb, 0x69, 0xbe, 0xa4, 0xa9, 0x7e, 0xfa, 0x95, 0xe1, 0x8b, 0x11, 0x8c, 0x19,
	0xc3, 0x14, 0x56, 0x58, 0x76, 0xbd, 0x9b, 0x26, 0x6d, 0x31, 0x25, 0xc1, 0xa8, 0xa1, 0xf7, 0x6e,
	0xac, 0xba, 0x62, 0x8e, 0x64, 0x64, 0x87, 0xb5, 0x63, 0x0f, 0xb2, 0x47, 0x1a, 0xbb, 0xda, 0x23,
	0x8c, 0xee, 0x72, 0x2f, 0x31, 0xa4, 0xda, 0x8e, 0x9b, 0xb1, 0x3f, 0x57, 0xd1, 0x77, 0x74, 0x74,
	0xf4, 0x9d, 0xef, 0x28, 0x86, 0x5e, 0x3e, 0xce, 0x8f, 0x73, 0x25, 0x4b, 0x49, 0xba, 0x82, 0x95,
	0xef, 0xa5, 0x7a, 0xe7, 0xbf, 0x85, 0x2e, 0xcd, 0x97, 0x73, 0x99, 0x30, 0x32, 0x04, 0x2b, 0x8c,
	0x5c, 0xe4, 0xa1, 0xa0, 0x47, 0xad, 0x30, 0x22, 0x04, 0xec, 0x48, 0xaa, 0xd2, 0xb5, 0x3c, 0x14,
	0x38, 0xd4, 0xac, 0x0d, 0x67, 0xea, 0x76, 0x2a, 0xce, 0xd4, 0x7f, 0x0d, 0x7d, 0x9a, 0x2f, 0x4f,
	0x45, 0x12, 0x49, 0x2e, 0xca, 0x7f, 0x91, 0xf0, 0x7f, 0x20, 0xe8, 0xce, 0x8a, 0x34, 0xe2, 0x22,
	0x25, 0x2e, 0x74, 0xaf, 0x98, 0x2a, 0xb8, 0x14, 0xe6, 0x90, 0x43, 0xeb, 0x92, 0x04, 0x60, 0x9f,
	0x29, 0xb9, 0x32, 0x27, 0xfb, 0xe3, 0xc3, 0xe3, 0xaa, 0xdf, 0xe3, 0xd6, 0x6d, 0xd4, 0x30, 0xc8,
	0x0b, 0xb0, 0x16, 0xd2, 0xb4, 0xf4, 0x3b, 0x9e, 0xb5, 0x90, 0xfa, 0xa6, 0xe5, 0x6d, 0xcc, 0x45,
	0x38, 0x75, 0x6d, 0x0f, 0x05, 0xfb, 0xb4, 0x2e, 0xc9, 0x08, 0xe0, 0xf4, 0x2e, 0xe7, 0x2a, 0x2e,
	0x75, 0x1b, 0x8e, 0x87, 0x02, 0x9b, 0xb6, 0x10, 0xed, 0x29, 0xba, 0x70, 0x77, 0x3d, 0x14, 0x0c,
	0xa8, 0x15, 0x5d, 0x68, 0x4f, 0x97, 0x3c, 0x15, 0x6e, 0xd7, 0x20, 0x66, 0xad, 0xd5, 0x27, 0x6b,
	0xb5, 0xe0, 0x2b, 0xe6, 0xee, 0x19, 0x81, 0xba, 0xf4, 0xcf, 0x1f, 0xcd, 0xca, 0x3f, 0x9a, 0xf5,
	0x61, 0x70, 0xc5, 0x14, 0xbf, 0xb9, 0xa7, 0xac, 0x58, 0x67, 0x8f, 0xe3, 0xda, 0xa3, 0x4f, 0x30,
	0xff, 0x14, 0xfa, 0xb3, 0x22, 0x3d, 0xe3, 0x22, 0x31, 0x61, 0x3d, 0x83, 0xdd, 0x45, 0xac, 0x52,
	0x56, 0x1a, 0xad, 0x01, 0xad, 0xaa, 0x2d, 0x37, 0xd6, 0xb6, 0x1b, 0xff, 0x0a, 0x06, 0xb3, 0x22,
	0x9d, 0x33, 0x9e, 0xde, 0x5e, 0x4b, 0x55, 0x90, 0x97, 0xe0, 0x68, 0xbd, 0xc2, 0x45, 0x5e, 0x27,
	0xe8, 0x8f, 0x71, 0x7b, 0x80, 0x7a, 0x83, 0x3e, 0x6e, 0xff, 0x55, 0xf7, 0x8b, 0x65, 0x8c, 0x4e,
	0xe3, 0x32, 0x26, 0xaf, 0x60, 0x4f, 0xff, 0x2e, 0xee, 0x73, 0x66, 0xba, 0x1b, 0x8e, 0xff, 0x6b,
	0x64, 0xeb, 0x0d, 0xda, 0x50, 0xf4, 0x5c, 0xce, 0x95, 0x5c, 0xe7, 0xe1, 0xd4, 0xe8, 0xf6, 0x68,
	0x5d, 0x6e, 0x5d, 0xda, 0xf9, 0x25, 0x9a, 0xe7, 0xd0, 0x9b, 0xb1, 0xa2, 0x88, 0x53, 0x56, 0xc5,
	0x6a, 0xd3, 0x0d, 0xa0, 0xa7, 0x7a, 0xc2, 0x3f, 0x6c, 0x08, 0x8e, 0x19, 0xd4, 0x13, 0x4c, 0x2b,
	0x5c, 0x2a, 0x63, 0x34, 0x9c, 0x56, 0x19, 0x6f, 0x00, 0x1d, 0xb5, 0xee, 0xb2, 0x8e, 0xda, 0x98,
	0x1b, 0x01, 0x50, 0x96, 0xc5, 0xf7, 0x13, 0xb9, 0x16, 0xa5, 0x49, 0xdb, 0xa1, 0x2d, 0x84, 0x78,
	0xd0, 0xaf, 0xe4, 0x27, 0x32, 0x61, 0x6e, 0xcf, 0x3c, 0xb6, 0x36, 0xd4, 0x62, 0x84, 0xe2, 0x46,
	0xba, 0xf0, 0x84, 0xa1, 0xa1, 0xa3, 0x8f, 0x0d, 0xc3, 0x0c, 0xe8, 0xa0, 0x29, 0xe7, 0x52, 0x30,
	0xbc, 0xd3, 0x02, 0xf4, 0xbf, 0x08, 0xa3, 0x36, 0x20, 0x45, 0x8a, 0x2d, 0xf2, 0x3f, 0x1c, 0x54,
	0x80, 0x7e, 0x31, 0x42, 0x26, 0x0c, 0x77, 0xc8, 0x21, 0xe0, 0x5a, 0xa7, 0xce, 0x1f, 0xdb, 0xad,
	0xb3, 0xda, 0x1f, 0x76, 0x8e, 0xee, 0x36, 0xf1, 0x91, 0x21, 0x80, 0x5e, 0xcf, 0xa5, 0x5a, 0xc5,
	0x19, 0xde, 0xa9, 0xeb, 0xf3, 0x4c, 0x5e, 0xc7, 0x19, 0x46, 0x5a, 0x72, 0x53, 0xd3, 0x58, 0x24,
	0x72, 0x85, 0x2d, 0xb2, 0x0f, 0x3d, 0x83, 0xea, 0x18, 0x71, 0x47, 0x37, 0xd3, 0x94, 0x13, 0x99,
	0xad, 0x57, 0x02, 0xdb, 0x84, 0xc0, 0xb0, 0x01, 0x2f, 0x33, 0xbe, 0x64, 0xd8, 0x39, 0xc1, 0x9f,
	0x1f, 0x46, 0xe8, 0xeb, 0xc3, 0x08, 0x7d, 0x7b, 0x18, 0xa1, 0x4f, 0xdf, 0x47, 0x3b, 0xd7, 0xbb,
	0xe6, 0x73, 0xf5, 0xe6, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xe9, 0xe5, 0x20, 0xbb, 0x04,
	0x00, 0x00,
}

func (m *RpcNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IP) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Port))
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RpcEndPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcEndPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IP) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Version))
	}
	if m.From != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.From.Size()))
		n1, err1 := m.From.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.To != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.To.Size()))
		n2, err2 := m.To.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.ChainID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.ChainID))
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	if len(m.PK) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.PK)))
		i += copy(dAtA[i:], m.PK)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.CurTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.CurTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgPong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Version))
	}
	if m.VerifyResult {
		dAtA[i] = 0x10
		i++
		if m.VerifyResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgFindNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFindNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgNeighbors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNeighbors) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintP2P(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.DataType))
	}
	if len(m.GroupID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.MessageID))
	}
	if len(m.BizMessageID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.BizMessageID)))
		i += copy(dAtA[i:], m.BizMessageID)
	}
	if len(m.SrcNodeID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.SrcNodeID)))
		i += copy(dAtA[i:], m.SrcNodeID)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.RelayCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.RelayCount))
	}
	if m.MessageCode != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.MessageCode))
	}
	if m.MessageInfo != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.MessageInfo))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintP2P(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RpcNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovP2P(uint64(m.Port))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RpcEndPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovP2P(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovP2P(uint64(m.Version))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.ChainID != 0 {
		n += 1 + sovP2P(uint64(m.ChainID))
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	l = len(m.PK)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.CurTime != 0 {
		n += 1 + sovP2P(uint64(m.CurTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgPong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovP2P(uint64(m.Version))
	}
	if m.VerifyResult {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgFindNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgNeighbors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovP2P(uint64(l))
		}
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovP2P(uint64(m.DataType))
	}
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2P(uint64(m.MessageID))
	}
	l = len(m.BizMessageID)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.SrcNodeID)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.RelayCount != 0 {
		n += 1 + sovP2P(uint64(m.RelayCount))
	}
	if m.MessageCode != 0 {
		n += 1 + sovP2P(uint64(m.MessageCode))
	}
	if m.MessageInfo != 0 {
		n += 1 + sovP2P(uint64(m.MessageInfo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovP2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozP2P(x uint64) (n int) {
	return sovP2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpcNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcEndPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcEndPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcEndPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &RpcEndPoint{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &RpcEndPoint{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PK = append(m.PK[:0], dAtA[iNdEx:postIndex]...)
			if m.PK == nil {
				m.PK = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurTime", wireType)
			}
			m.CurTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyResult = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFindNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFindNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFindNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNeighbors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNeighbors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNeighbors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &RpcNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizMessageID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BizMessageID = append(m.BizMessageID[:0], dAtA[iNdEx:postIndex]...)
			if m.BizMessageID == nil {
				m.BizMessageID = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNodeID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcNodeID = append(m.SrcNodeID[:0], dAtA[iNdEx:postIndex]...)
			if m.SrcNodeID == nil {
				m.SrcNodeID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayCount", wireType)
			}
			m.RelayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCode", wireType)
			}
			m.MessageCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageInfo", wireType)
			}
			m.MessageInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageInfo |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthP2P
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthP2P
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowP2P
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipP2P(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthP2P
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthP2P = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2P   = fmt.Errorf("proto: integer overflow")
)
